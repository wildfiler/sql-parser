#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.2
# from Racc grammar file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 398)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'59,265,265,274,77,279,279,264,264,44,103,84,94,141,230,231,13,298,101',
'102,26,28,233,78,232,80,81,-99,82,83,-99,17,135,234,86,86,59,282,282',
'86,233,67,284,231,37,44,33,33,33,285,23,104,232,9,34,10,26,11,24,61',
'62,12,49,52,54,55,56,57,58,60,63,15,68,69,71,59,16,67,72,275,37,276',
'33,277,44,144,145,98,113,114,34,73,221,309,310,61,62,74,49,52,54,55',
'56,57,58,60,63,23,68,69,71,59,216,217,23,218,67,219,220,90,44,33,92',
'93,222,223,224,225,226,209,210,148,98,-171,61,62,-99,49,52,54,55,56',
'57,58,60,63,59,68,69,71,107,108,67,-171,-171,44,-171,33,-171,-171,109',
'110,111,112,116,-171,-171,-171,-171,-171,117,118,119,49,52,54,55,56',
'57,58,60,63,59,68,69,71,86,67,23,128,37,44,33,129,130,131,132,86,136',
'135,34,23,86,148,174,61,62,179,49,52,54,55,56,57,58,60,63,188,68,69',
'71,59,116,67,114,189,37,190,33,123,150,194,135,198,199,23,34,23,203',
'205,207,61,62,227,49,52,54,55,56,57,58,60,63,86,68,69,71,237,158,59',
'238,239,67,240,241,37,153,154,44,242,243,244,245,246,247,34,248,77,251',
'86,61,62,233,49,52,54,55,56,57,58,60,63,266,68,69,71,78,59,80,81,67',
'82,83,37,268,33,44,269,270,272,273,179,12,34,300,302,303,194,61,62,306',
'49,52,54,55,56,57,58,60,63,307,68,69,71,33,59,315,320,67,322,323,37',
'325,33,44,233,86,233,331,332,334,34,335,77,336,337,61,62,338,49,52,54',
'55,56,57,58,60,63,33,68,69,71,78,59,80,81,67,82,83,258,259,33,44,86',
',,,,,,,,,,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,,59,,,67,,,,,33',
'44,,,,,,,,,,,180,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,,59,,,67',
',,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71',
',59,,,67,,,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63',
',68,69,71,,59,,,67,,,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57',
'58,60,63,,68,69,71,,59,,,67,,,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54',
'55,56,57,58,60,63,,68,69,71,,59,,,67,,,37,,33,44,,,,,,,34,,,,,61,62',
',49,52,54,55,56,57,58,60,63,,68,69,71,,59,,,67,,,37,,33,44,,,,,,,34',
',,,,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,,59,,,67,,,37,,33,150',
',,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,158,59,,,67',
',,37,153,154,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,68,69',
'71,,59,,,67,,,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60',
'63,,68,69,71,,59,,,67,,,37,,33,150,,,,,,,34,,,12,,61,62,,49,52,54,55',
'56,57,58,60,63,,68,69,71,158,59,,,67,,,37,153,154,150,,,,,,,34,,,,,61',
'62,,49,52,54,55,56,57,58,60,63,,68,69,71,,59,,,67,,,37,153,235,44,,',
',,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,,59,,,67,,,37',
',33,253,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,,59',
',,67,,,37,,235,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,68',
'69,71,,59,,,67,,,37,,33,253,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58',
'60,63,,68,69,71,,59,,,67,,,37,,235,253,,,,,,,34,,,,,61,62,,49,52,54',
'55,56,57,58,60,63,,68,69,71,,59,,,67,,,37,,235,253,,,,,,,34,,,,,61,62',
',49,52,54,55,56,57,58,60,63,,68,69,71,,59,,,67,,,37,,235,253,,,,,,,34',
',,,,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,,59,,,67,,,37,,235,253',
',,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,,59,,,67,,',
'37,,235,253,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71',
',59,,,67,,,37,,235,253,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63',
',68,69,71,,59,,,67,,,37,,235,253,,,,,,,34,,,,,61,62,,49,52,54,55,56',
'57,58,60,63,,68,69,71,,59,,,67,,,37,,235,44,292,,,,,,34,,,,,61,62,,49',
'52,54,55,56,57,58,60,63,,68,69,71,,59,,,67,,,37,,33,150,,,,,,,34,,,',
',61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,158,59,,,67,,,37,153,154',
'150,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,158,59',
',,67,,,37,153,154,150,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63',
',68,69,71,158,59,,,67,,,37,153,154,44,,,,,,,34,,,,,61,62,,49,52,54,55',
'56,57,58,60,63,,68,69,71,,59,,,67,,,37,,33,44,,,,,,,34,,,,,61,62,,49',
'52,54,55,56,57,58,60,63,,68,69,71,,59,,,67,,,37,,33,44,,,,,,,34,,,,',
'61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,,59,,,67,,,37,,33,44,,,',
',,,34,,,12,,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,,59,,,67,,,37',
',33,150,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,158',
'59,,,67,,,37,153,154,150,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60',
'63,,68,69,71,158,59,,,67,,,37,153,154,44,,,,,,,34,,,,,61,62,,49,52,54',
'55,56,57,58,60,63,,68,69,71,,59,,,67,,,37,,33,253,,,,,,,34,,,,,61,62',
',49,52,54,55,56,57,58,60,63,,68,69,71,,59,,,67,,,37,,235,253,,,,,,,34',
',,,,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,,59,,,67,,,37,,235,44',
',,,,,,34,,,12,,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,,59,,,67',
',,37,,33,44,292,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,68,69',
'71,,59,,,67,,,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60',
'63,,68,69,71,,59,,,67,,,37,,33,253,,,,,,,34,,,,,61,62,,49,52,54,55,56',
'57,58,60,63,,68,69,71,,59,,,67,,,37,,235,253,,,,,,,34,,,,,61,62,,49',
'52,54,55,56,57,58,60,63,,68,69,71,,,,,67,,,37,,235,,,,,,,,34,-183,,',
'-183,61,62,,49,52,54,55,56,57,58,60,63,,68,69,71,-183,-183,,-183,,-183',
'-183,,77,,,,-183,-183,-183,-183,-183,76,,,,77,-183,-183,-183,122,,78',
',80,81,,82,83,123,,,,,,78,,80,81,,82,83' ]
        racc_action_table = arr = ::Array.new(2053, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'12,203,307,214,87,218,276,203,307,12,38,19,32,93,154,155,1,235,35,35',
'12,12,156,87,155,87,87,154,87,87,235,9,87,156,19,32,28,218,276,93,214',
'12,220,296,12,28,12,203,307,220,10,38,296,0,12,0,28,0,11,12,12,0,12',
'12,12,12,12,12,12,12,12,7,12,12,12,34,7,28,13,216,28,216,28,216,34,96',
'96,96,63,63,28,15,152,262,262,28,28,16,28,28,28,28,28,28,28,28,28,17',
'28,28,28,39,152,152,24,152,34,152,152,25,39,34,30,31,152,152,152,152',
'152,147,147,147,34,323,34,34,33,34,34,34,34,34,34,34,34,34,44,34,34',
'34,52,54,39,323,323,44,323,39,323,323,55,56,57,58,64,323,323,323,323',
'323,71,73,74,39,39,39,39,39,39,39,39,39,92,39,39,39,76,44,77,78,44,92',
'44,79,81,82,83,84,88,89,44,90,94,97,100,44,44,106,44,44,44,44,44,44',
'44,44,44,114,44,44,44,98,115,92,116,118,92,119,92,121,98,123,124,125',
'126,128,92,129,136,137,138,92,92,153,92,92,92,92,92,92,92,92,92,174',
'92,92,92,180,98,101,181,182,98,183,184,98,98,98,101,185,186,187,189',
'190,192,98,193,139,195,198,98,98,202,98,98,98,98,98,98,98,98,98,205',
'98,98,98,139,102,139,139,101,139,139,101,206,101,102,207,208,212,213',
'215,227,101,246,249,250,251,101,101,259,101,101,101,101,101,101,101',
'101,101,260,101,101,101,269,103,271,278,102,284,293,102,300,102,103',
'305,306,311,312,317,321,102,324,201,325,327,102,102,328,102,102,102',
'102,102,102,102,102,102,331,102,102,102,201,104,201,201,103,201,201',
'201,201,103,104,338,,,,,,,,,,,103,103,,103,103,103,103,103,103,103,103',
'103,,103,103,103,,107,,,104,,,,,104,107,,,,,,,,,,,107,104,104,,104,104',
'104,104,104,104,104,104,104,,104,104,104,,108,,,107,,,107,,107,108,',
',,,,,107,,,,,107,107,,107,107,107,107,107,107,107,107,107,,107,107,107',
',109,,,108,,,108,,108,109,,,,,,,108,,,,,108,108,,108,108,108,108,108',
'108,108,108,108,,108,108,108,,110,,,109,,,109,,109,110,,,,,,,109,,,',
',109,109,,109,109,109,109,109,109,109,109,109,,109,109,109,,111,,,110',
',,110,,110,111,,,,,,,110,,,,,110,110,,110,110,110,110,110,110,110,110',
'110,,110,110,110,,112,,,111,,,111,,111,112,,,,,,,111,,,,,111,111,,111',
'111,111,111,111,111,111,111,111,,111,111,111,,122,,,112,,,112,,112,122',
',,,,,,112,,,,,112,112,,112,112,112,112,112,112,112,112,112,,112,112',
'112,,135,,,122,,,122,,122,135,,,,,,,122,,,,,122,122,,122,122,122,122',
'122,122,122,122,122,,122,122,122,135,145,,,135,,,135,135,135,145,,,',
',,,135,,,,,135,135,,135,135,135,135,135,135,135,135,135,,135,135,135',
',148,,,145,,,145,,145,148,,,,,,,145,,,,,145,145,,145,145,145,145,145',
'145,145,145,145,,145,145,145,,150,,,148,,,148,,148,150,,,,,,,148,,,150',
',148,148,,148,148,148,148,148,148,148,148,148,,148,148,148,150,158,',
',150,,,150,150,150,158,,,,,,,150,,,,,150,150,,150,150,150,150,150,150',
'150,150,150,,150,150,150,,194,,,158,,,158,158,158,194,,,,,,,158,,,,',
'158,158,,158,158,158,158,158,158,158,158,158,,158,158,158,,199,,,194',
',,194,,194,199,,,,,,,194,,,,,194,194,,194,194,194,194,194,194,194,194',
'194,,194,194,194,,210,,,199,,,199,,199,210,,,,,,,199,,,,,199,199,,199',
'199,199,199,199,199,199,199,199,,199,199,199,,217,,,210,,,210,,210,217',
',,,,,,210,,,,,210,210,,210,210,210,210,210,210,210,210,210,,210,210',
'210,,219,,,217,,,217,,217,219,,,,,,,217,,,,,217,217,,217,217,217,217',
'217,217,217,217,217,,217,217,217,,221,,,219,,,219,,219,221,,,,,,,219',
',,,,219,219,,219,219,219,219,219,219,219,219,219,,219,219,219,,222,',
',221,,,221,,221,222,,,,,,,221,,,,,221,221,,221,221,221,221,221,221,221',
'221,221,,221,221,221,,223,,,222,,,222,,222,223,,,,,,,222,,,,,222,222',
',222,222,222,222,222,222,222,222,222,,222,222,222,,224,,,223,,,223,',
'223,224,,,,,,,223,,,,,223,223,,223,223,223,223,223,223,223,223,223,',
'223,223,223,,225,,,224,,,224,,224,225,,,,,,,224,,,,,224,224,,224,224',
'224,224,224,224,224,224,224,,224,224,224,,226,,,225,,,225,,225,226,',
',,,,,225,,,,,225,225,,225,225,225,225,225,225,225,225,225,,225,225,225',
',230,,,226,,,226,,226,230,230,,,,,,226,,,,,226,226,,226,226,226,226',
'226,226,226,226,226,,226,226,226,,231,,,230,,,230,,230,231,,,,,,,230',
',,,,230,230,,230,230,230,230,230,230,230,230,230,,230,230,230,231,232',
',,231,,,231,231,231,232,,,,,,,231,,,,,231,231,,231,231,231,231,231,231',
'231,231,231,,231,231,231,232,233,,,232,,,232,232,232,233,,,,,,,232,',
',,,232,232,,232,232,232,232,232,232,232,232,232,,232,232,232,233,234',
',,233,,,233,233,233,234,,,,,,,233,,,,,233,233,,233,233,233,233,233,233',
'233,233,233,,233,233,233,,244,,,234,,,234,,234,244,,,,,,,234,,,,,234',
'234,,234,234,234,234,234,234,234,234,234,,234,234,234,,248,,,244,,,244',
',244,248,,,,,,,244,,,,,244,244,,244,244,244,244,244,244,244,244,244',
',244,244,244,,253,,,248,,,248,,248,253,,,,,,,248,,,253,,248,248,,248',
'248,248,248,248,248,248,248,248,,248,248,248,,258,,,253,,,253,,253,258',
',,,,,,253,,,,,253,253,,253,253,253,253,253,253,253,253,253,,253,253',
'253,258,268,,,258,,,258,258,258,268,,,,,,,258,,,,,258,258,,258,258,258',
'258,258,258,258,258,258,,258,258,258,268,272,,,268,,,268,268,268,272',
',,,,,,268,,,,,268,268,,268,268,268,268,268,268,268,268,268,,268,268',
'268,,275,,,272,,,272,,272,275,,,,,,,272,,,,,272,272,,272,272,272,272',
'272,272,272,272,272,,272,272,272,,277,,,275,,,275,,275,277,,,,,,,275',
',,,,275,275,,275,275,275,275,275,275,275,275,275,,275,275,275,,279,',
',277,,,277,,277,279,,,,,,,277,,,279,,277,277,,277,277,277,277,277,277',
'277,277,277,,277,277,277,,298,,,279,,,279,,279,298,298,,,,,,279,,,,',
'279,279,,279,279,279,279,279,279,279,279,279,,279,279,279,,303,,,298',
',,298,,298,303,,,,,,,298,,,,,298,298,,298,298,298,298,298,298,298,298',
'298,,298,298,298,,320,,,303,,,303,,303,320,,,,,,,303,,,,,303,303,,303',
'303,303,303,303,303,303,303,303,,303,303,303,,332,,,320,,,320,,320,332',
',,,,,,320,,,,,320,320,,320,320,320,320,320,320,320,320,320,,320,320',
'320,,,,,332,,,332,,332,,,,,,,,332,163,,,163,332,332,,332,332,332,332',
'332,332,332,332,332,,332,332,332,163,163,,163,,163,163,,18,,,,163,163',
'163,163,163,18,,,,75,163,163,163,75,,18,,18,18,,18,18,75,,,,,,75,,75',
'75,,75,75' ]
        racc_action_check = arr = ::Array.new(2053, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    36,    16,   nil,   nil,   nil,   nil,   nil,    67,   nil,    13,
    -2,    36,    -6,    78,   nil,    86,    91,    55,  2003,   -18,
   nil,   nil,   nil,   nil,    62,    97,   nil,   nil,    30,   nil,
   111,    95,   -17,   108,    69,   -47,   nil,   nil,   -16,   105,
   nil,   nil,   nil,   nil,   140,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   135,   nil,   136,   145,   146,   147,   148,   nil,
   nil,   nil,   nil,    12,    88,   nil,   nil,   nil,   nil,   nil,
   nil,    89,   nil,   165,   165,  2016,   134,   136,   158,   162,
   nil,   160,   161,   162,   145,   nil,   nil,    -7,   196,   160,
   149,   nil,   176,   -13,   150,   nil,    24,   140,   215,   nil,
   176,   253,   291,   329,   367,   nil,   191,   405,   443,   481,
   519,   557,   595,   nil,   141,   146,   147,   nil,   218,   223,
   nil,   205,   633,   216,   193,   222,   211,   nil,   183,   185,
   nil,   nil,   nil,   nil,   nil,   671,   235,   198,   200,   266,
   nil,   nil,   nil,   nil,   nil,   709,   nil,    68,   747,   nil,
   785,   nil,    69,   228,    -1,   -30,   -31,   nil,   823,   nil,
   nil,   nil,   nil,  1963,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   201,   nil,   nil,   nil,   nil,   nil,
   241,   244,   245,   247,   248,   253,   254,   260,   nil,   264,
   263,   nil,   258,   265,   861,   267,   nil,   nil,   227,   899,
   nil,   342,   229,    -5,   nil,   286,   262,   304,   247,   nil,
   937,   nil,   245,   294,   -13,   295,    35,   975,   -10,  1013,
    -1,  1051,  1089,  1127,  1165,  1203,  1241,   287,   nil,   nil,
  1279,  1317,  1355,  1393,  1431,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1469,   nil,   308,   nil,  1507,   299,
   305,   302,   nil,  1545,   nil,   nil,   nil,   nil,  1583,   305,
   319,   nil,    80,   nil,   nil,   nil,   nil,   nil,  1621,   282,
   nil,   275,  1659,   nil,   nil,  1697,    -9,  1735,   292,  1773,
   nil,   nil,   nil,   nil,   289,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   324,   nil,   nil,    -2,   nil,  1811,   nil,
   335,   nil,   nil,  1849,   nil,   292,   294,    -4,   nil,   nil,
   nil,   294,   337,   nil,   nil,   nil,   nil,   304,   nil,   nil,
  1887,   334,   nil,   110,   336,   346,   nil,   339,   347,   nil,
   nil,   316,  1925,   nil,   nil,   nil,   nil,   nil,   331,   nil,
   nil,   nil ]

racc_action_default = [
  -191,  -191,    -1,    -2,    -3,    -4,    -5,    -9,   -22,  -191,
  -191,  -191,  -191,  -191,    -6,  -191,  -191,  -191,  -191,   -53,
   -54,   -56,   -57,   -99,  -191,   -38,   -39,   -40,  -191,   -42,
   -44,  -191,   -48,  -179,  -191,  -142,  -143,  -144,  -147,  -191,
  -149,  -150,  -151,  -152,  -191,  -154,  -155,  -156,  -157,  -158,
  -160,  -161,  -191,  -163,  -191,  -191,  -191,  -191,  -191,  -175,
  -176,  -177,  -178,  -191,  -181,  -182,  -183,  -184,  -187,  -188,
  -189,  -191,   342,  -191,  -191,  -191,  -191,  -191,  -191,  -191,
   -61,   -63,   -65,   -66,  -191,   -52,  -179,   -73,    -7,   -73,
  -191,   -41,  -191,  -191,  -191,   -47,  -191,  -191,  -191,  -138,
  -191,  -191,  -191,  -191,  -191,  -148,  -191,  -191,  -191,  -191,
  -191,  -191,  -191,  -180,  -191,  -185,  -191,  -190,  -191,  -191,
   -23,  -191,  -191,  -191,   -73,   -28,  -191,   -58,  -191,  -191,
   -62,   -64,   -67,   -51,   -26,  -191,  -191,   -77,   -75,   -50,
   -43,   -45,  -159,   -46,  -130,  -191,  -139,  -191,  -191,  -135,
  -191,   -84,  -191,  -191,  -179,  -102,  -191,  -104,  -191,  -108,
  -109,  -110,  -111,  -113,  -114,  -115,  -116,  -117,  -118,  -119,
  -126,  -127,  -128,  -129,  -191,  -140,  -141,  -145,  -146,  -153,
  -191,  -191,  -191,  -191,  -191,  -191,  -191,  -173,  -186,  -191,
  -191,   -24,  -191,   -32,  -191,   -35,   -36,   -25,  -191,  -191,
   -59,  -191,   -74,  -191,   -37,  -191,   -82,  -191,  -191,  -132,
  -191,  -136,  -191,  -191,  -191,  -128,  -191,  -191,  -191,  -191,
  -191,  -191,  -191,  -191,  -191,  -191,  -191,  -191,   -55,   -98,
  -191,  -191,  -191,  -191,  -191,  -179,  -107,  -162,  -164,  -165,
  -166,  -167,  -168,  -169,  -191,   -10,  -191,   -30,  -191,  -191,
   -93,  -191,   -27,  -191,   -29,   -60,   -68,   -69,  -191,  -191,
    -8,   -13,   -18,   -15,   -16,   -17,   -78,   -49,  -191,  -191,
  -131,  -191,  -191,   -21,  -112,  -191,  -191,  -191,  -191,  -191,
   -88,   -89,   -91,   -95,  -191,   -97,  -120,  -121,  -122,  -123,
  -124,  -125,  -170,  -191,  -105,  -106,  -103,  -137,  -191,  -174,
  -191,   -31,   -33,  -191,   -34,   -70,  -191,  -191,   -14,   -19,
   -20,   -83,   -76,   -80,   -81,  -133,  -134,  -191,   -87,   -94,
  -191,  -191,   -96,  -172,  -191,  -191,   -92,  -191,   -72,  -101,
   -12,  -191,  -191,   -86,   -90,  -171,   -11,   -71,  -191,   -79,
   -85,  -100 ]

racc_goto_table = [
    85,   186,    32,   156,   263,   192,   196,   228,   163,    18,
   261,   313,   115,    95,   124,    31,    75,   149,    32,   280,
   249,    29,     1,    87,    97,   120,   294,   295,    99,    19,
     2,    31,     3,     4,   106,     5,    19,    91,     6,   134,
   202,   138,     7,    19,    14,   163,   137,   260,   308,   121,
    25,    88,   204,   140,    89,   214,   206,   126,   267,   229,
   163,   254,   255,   115,   256,   133,   257,   211,   163,   327,
   314,   191,   228,   339,   142,   143,   197,   318,   328,   278,
   312,   283,    32,   286,   287,   288,   289,   290,   291,   139,
   146,   175,   176,   177,   178,    31,   127,   181,   182,   183,
   184,   185,   187,   296,   236,   321,    96,   147,   263,    19,
   105,   nil,   193,   nil,   330,   nil,   nil,   nil,   nil,   293,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   201,   326,
   228,   301,   314,   299,   304,   208,   252,   317,   212,   319,
   215,   163,   163,   163,   nil,   nil,   nil,   200,    19,   nil,
   nil,   nil,   nil,   nil,   nil,   142,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   305,   nil,   nil,   nil,   nil,   163,   nil,
   nil,   nil,   nil,   311,   nil,   nil,   nil,   nil,   163,   126,
   nil,   nil,   333,   nil,   250,   nil,   nil,   324,   nil,   nil,
   nil,   nil,   nil,   nil,   340,   nil,   nil,   nil,   nil,   nil,
   271,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   187,   nil,   nil,   nil,   297,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   187,   nil,   nil,   nil,   193,   nil,
   nil,   nil,   nil,   106,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   316,   nil,   nil,   nil,   nil,   nil,   nil,   250,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   329,   187,   nil,
   nil,   nil,   nil,   250,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   341 ]

racc_goto_check = [
    23,    87,    26,    49,    14,    25,    29,    15,    67,    17,
    11,    53,    88,    23,    20,    36,    17,    75,    26,    57,
    28,    33,     1,    17,    73,    18,    62,    62,    76,    40,
     2,    36,     3,     4,    26,     5,    40,    33,     6,    21,
    49,    21,     7,    40,     8,    67,     9,    10,    13,    19,
    30,    31,    32,    34,    37,    49,    38,    23,    39,    42,
    67,    24,    46,    88,    47,    23,    48,    75,    67,    50,
    14,    18,    15,    53,    23,    23,    21,    57,    51,    24,
    52,    24,    26,    24,    24,    24,    24,    24,    24,    17,
    76,    26,    26,    73,    73,    36,    40,    26,    26,    26,
    26,    26,    26,    61,    63,    28,    72,    74,    14,    40,
    79,   nil,    26,   nil,    11,   nil,   nil,   nil,   nil,    87,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    17,    28,
    15,    25,    14,    87,    29,    26,    20,    24,    26,    24,
    26,    67,    67,    67,   nil,   nil,   nil,    40,    40,   nil,
   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,    67,   nil,
   nil,   nil,   nil,    49,   nil,   nil,   nil,   nil,    67,    23,
   nil,   nil,    24,   nil,    26,   nil,   nil,    87,   nil,   nil,
   nil,   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    26,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,    26,   nil,
   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,    26,   nil,
   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23 ]

racc_goto_pointer = [
   nil,    22,    30,    32,    33,    35,    38,    42,    37,   -42,
  -156,  -193,   nil,  -214,  -199,  -146,   nil,    -1,   -50,   -26,
   -62,   -48,   nil,   -19,  -138,  -117,   -10,   nil,  -174,  -117,
    38,    26,   -85,     9,   -39,   nil,     3,    29,   -82,  -148,
    19,   nil,   -94,   nil,   nil,   nil,  -139,  -137,  -135,   -95,
  -237,  -228,  -189,  -258,   nil,   nil,   nil,  -199,   nil,   nil,
   nil,  -130,  -205,   -54,   nil,   nil,   nil,   -90,   nil,   nil,
   nil,   nil,    72,   -10,    10,   -80,    -6,   nil,   nil,    71,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -111,   -52,   nil,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   213,   nil,   nil,
   nil,   nil,   262,   nil,    42,   151,     8,   nil,   nil,   nil,
   nil,   nil,   125,    50,   152,   nil,   172,   195,   nil,   nil,
   nil,   nil,   nil,   nil,    27,    30,   100,   nil,   nil,   nil,
    51,    20,   281,    21,    22,    79,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   171,   165,   166,   nil,   167,   168,
   169,   155,   157,   159,   160,   161,   162,    66,   164,   170,
   173,    36,   nil,    35,   nil,   nil,   nil,    38,    39,    40,
    41,    43,    45,    46,    47,    48,    53,   nil,    64,    65,
    70 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 83, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  2, 85, :_reduce_6,
  0, 91, :_reduce_none,
  3, 91, :_reduce_8,
  0, 90, :_reduce_none,
  5, 90, :_reduce_10,
  8, 90, :_reduce_11,
  3, 92, :_reduce_12,
  1, 92, :_reduce_none,
  2, 93, :_reduce_14,
  1, 94, :_reduce_none,
  1, 94, :_reduce_16,
  1, 94, :_reduce_17,
  0, 95, :_reduce_18,
  1, 95, :_reduce_19,
  1, 95, :_reduce_20,
  3, 97, :_reduce_21,
  1, 89, :_reduce_none,
  4, 86, :_reduce_23,
  5, 86, :_reduce_24,
  5, 87, :_reduce_25,
  4, 88, :_reduce_26,
  3, 102, :_reduce_27,
  1, 102, :_reduce_28,
  3, 104, :_reduce_29,
  3, 101, :_reduce_30,
  3, 107, :_reduce_31,
  1, 107, :_reduce_none,
  3, 109, :_reduce_33,
  3, 111, :_reduce_34,
  1, 111, :_reduce_none,
  2, 100, :_reduce_36,
  5, 98, :_reduce_37,
  2, 98, :_reduce_38,
  1, 115, :_reduce_39,
  1, 115, :_reduce_40,
  2, 112, :_reduce_41,
  1, 112, :_reduce_42,
  3, 116, :_reduce_43,
  1, 116, :_reduce_none,
  3, 117, :_reduce_45,
  3, 117, :_reduce_46,
  2, 117, :_reduce_47,
  1, 117, :_reduce_none,
  4, 113, :_reduce_49,
  2, 119, :_reduce_50,
  3, 99, :_reduce_51,
  2, 99, :_reduce_52,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 124, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  3, 125, :_reduce_58,
  4, 125, :_reduce_59,
  5, 126, :_reduce_60,
  1, 127, :_reduce_61,
  2, 127, :_reduce_62,
  1, 127, :_reduce_63,
  2, 127, :_reduce_64,
  1, 127, :_reduce_65,
  1, 127, :_reduce_66,
  2, 127, :_reduce_67,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  2, 129, :_reduce_70,
  4, 130, :_reduce_71,
  1, 132, :_reduce_none,
  0, 103, :_reduce_none,
  2, 103, :_reduce_74,
  0, 120, :_reduce_none,
  3, 120, :_reduce_76,
  0, 114, :_reduce_none,
  2, 114, :_reduce_78,
  3, 134, :_reduce_79,
  1, 134, :_reduce_none,
  1, 135, :_reduce_none,
  0, 121, :_reduce_none,
  2, 121, :_reduce_83,
  1, 136, :_reduce_none,
  6, 137, :_reduce_85,
  5, 137, :_reduce_86,
  4, 138, :_reduce_87,
  3, 138, :_reduce_88,
  1, 139, :_reduce_none,
  3, 139, :_reduce_90,
  1, 139, :_reduce_91,
  3, 110, :_reduce_92,
  1, 110, :_reduce_none,
  4, 140, :_reduce_94,
  3, 140, :_reduce_95,
  4, 141, :_reduce_96,
  3, 141, :_reduce_97,
  2, 142, :_reduce_98,
  1, 122, :_reduce_99,
  3, 133, :_reduce_100,
  1, 133, :_reduce_none,
  1, 131, :_reduce_none,
  3, 131, :_reduce_103,
  1, 143, :_reduce_none,
  3, 143, :_reduce_105,
  3, 143, :_reduce_106,
  2, 144, :_reduce_107,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  1, 145, :_reduce_none,
  1, 147, :_reduce_none,
  3, 147, :_reduce_112,
  1, 147, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 150, :_reduce_120,
  3, 150, :_reduce_121,
  3, 150, :_reduce_122,
  3, 150, :_reduce_123,
  3, 150, :_reduce_124,
  3, 150, :_reduce_125,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  3, 153, :_reduce_130,
  5, 153, :_reduce_131,
  4, 153, :_reduce_132,
  6, 153, :_reduce_133,
  4, 157, :_reduce_134,
  1, 156, :_reduce_135,
  2, 156, :_reduce_136,
  4, 158, :_reduce_137,
  1, 154, :_reduce_138,
  2, 154, :_reduce_139,
  3, 108, :_reduce_140,
  3, 108, :_reduce_141,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_144,
  3, 155, :_reduce_145,
  3, 155, :_reduce_146,
  1, 155, :_reduce_none,
  2, 159, :_reduce_148,
  1, 159, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_153,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 165, :_reduce_158,
  3, 96, :_reduce_159,
  1, 96, :_reduce_none,
  1, 118, :_reduce_none,
  4, 163, :_reduce_162,
  1, 163, :_reduce_none,
  4, 168, :_reduce_164,
  4, 168, :_reduce_165,
  4, 168, :_reduce_166,
  4, 168, :_reduce_167,
  4, 168, :_reduce_168,
  4, 168, :_reduce_169,
  3, 152, :_reduce_170,
  4, 152, :_reduce_171,
  4, 146, :_reduce_172,
  1, 169, :_reduce_none,
  3, 169, :_reduce_174,
  1, 166, :_reduce_175,
  1, 166, :_reduce_176,
  1, 160, :_reduce_177,
  1, 160, :_reduce_178,
  1, 105, :_reduce_179,
  2, 167, :_reduce_180,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_184,
  2, 170, :_reduce_185,
  3, 170, :_reduce_186,
  1, 149, :_reduce_187,
  1, 149, :_reduce_188,
  1, 171, :_reduce_none,
  2, 172, :_reduce_190 ]

racc_reduce_n = 191

racc_shift_n = 342

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :UPDATE => 19,
  :SET => 20,
  :DELETE => 21,
  :FROM => 22,
  :equals_operator => 23,
  :VALUES => 24,
  :SELECT => 25,
  :asterisk => 26,
  :DISTINCT => 27,
  :period => 28,
  :AS => 29,
  :CROSS => 30,
  :JOIN => 31,
  :INNER => 32,
  :LEFT => 33,
  :OUTER => 34,
  :RIGHT => 35,
  :FULL => 36,
  :ON => 37,
  :USING => 38,
  :WHERE => 39,
  :GROUP => 40,
  :LIMIT => 41,
  :HAVING => 42,
  :NOT => 43,
  :BETWEEN => 44,
  :AND => 45,
  :IN => 46,
  :variable => 47,
  :LIKE => 48,
  :IS => 49,
  :NULL => 50,
  :EXISTS => 51,
  :identifier => 52,
  :OR => 53,
  :XOR => 54,
  :not_equals_operator => 55,
  :less_than_operator => 56,
  :greater_than_operator => 57,
  :less_than_or_equals_operator => 58,
  :greater_than_or_equals_operator => 59,
  :CASE => 60,
  :END => 61,
  :ELSE => 62,
  :WHEN => 63,
  :THEN => 64,
  :plus_sign => 65,
  :minus_sign => 66,
  :solidus => 67,
  :CURRENT_USER => 68,
  :COUNT => 69,
  :AVG => 70,
  :MAX => 71,
  :MIN => 72,
  :SUM => 73,
  :IFNULL => 74,
  :unsigned_float => 75,
  :quote => 76,
  :character_string_literal => 77,
  :true_literal => 78,
  :false_literal => 79,
  :DATE => 80,
  :date_string => 81 }

racc_nt_base = 82

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "UPDATE",
  "SET",
  "DELETE",
  "FROM",
  "equals_operator",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "period",
  "AS",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "LIMIT",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "variable",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "XOR",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "CASE",
  "END",
  "ELSE",
  "WHEN",
  "THEN",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "IFNULL",
  "unsigned_float",
  "quote",
  "character_string_literal",
  "true_literal",
  "false_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "update_specification",
  "delete_specification",
  "query_expression",
  "fetch_only_clause",
  "order_by_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "assign_list",
  "where_clause",
  "assign_column",
  "column_name",
  "row_value_constructor",
  "in_column_list",
  "value_expression",
  "in_values_expression",
  "in_value_list",
  "in_values_list",
  "distinct_select_list",
  "table_expression",
  "limit_clause",
  "select_list",
  "select_sublist",
  "derived_column",
  "qualifier",
  "from_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "row_subquery",
  "between_predicate",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_function",
  "boolean_primary",
  "predicate",
  "boolean_literal",
  "comparison_predicate",
  "row_value_constructor_element",
  "general_function",
  "case_expression",
  "when_expressions",
  "term",
  "when_value_expressions",
  "when_value_expression",
  "when_expression",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "general_set_function",
  "argument_list",
  "string_literal",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1])
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2])
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_12(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_14(val, _values, result)
     result = val[1].new(val[0])
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Descending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1])
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Update.new(val[1], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::Delete.new(val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_27(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_28(val, _values, result)
     result = Array(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::AssignColumn.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 35 omitted

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::InValuesList.new(Array(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::All.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_42(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_43(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::All.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 48 omitted

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_60(val, _values, result)
     result = val[1].new(val[0], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::InnerJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::LeftJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::RightJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::FullJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::On.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2])
    result
  end
.,.,

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1])
    result
  end
.,.,

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2])
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_79(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1])
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2])
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_92(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_94(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_95(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 208)
  def _reduce_96(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 209)
  def _reduce_97(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_98(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_100(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_103(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2])
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Xor.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1])
    result
  end
.,.,

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_112(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_120(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_121(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2])
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_135(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_136(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_138(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_139(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2])
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Null.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2])
    result
  end
.,.,

# reduce 147 omitted

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_148(val, _values, result)
     result = val[0].new(val[1])
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_153(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2])
    result
  end
.,.,

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new)
    result
  end
.,.,

# reduce 163 omitted

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_165(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_166(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_167(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_168(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_169(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_170(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_171(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_172(val, _values, result)
     result = SQLParser::Statement::BooleanFunction.new(val[0], val[2])
    result
  end
.,.,

# reduce 173 omitted

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_174(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_175(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_176(val, _values, result)
    result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_177(val, _values, result)
     result = SQLParser::Statement::UnaryPlus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_178(val, _values, result)
     result = SQLParser::Statement::UnaryMinus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_179(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_180(val, _values, result)
     result = SQLParser::Statement::String.new('')
    result
  end
.,.,

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

module_eval(<<'.,.,', 'parser.racc', 377)
  def _reduce_184(val, _values, result)
     result = SQLParser::Statement::Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 380)
  def _reduce_185(val, _values, result)
     result = SQLParser::Statement::String.new(val[0].value + val[1].value)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_186(val, _values, result)
     result = SQLParser::Statement::String.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 383)
  def _reduce_187(val, _values, result)
     result = SQLParser::Statement::True.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 384)
  def _reduce_188(val, _values, result)
     result = SQLParser::Statement::False.new
    result
  end
.,.,

# reduce 189 omitted

module_eval(<<'.,.,', 'parser.racc', 390)
  def _reduce_190(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SQLParser
