#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.2
# from Racc grammar file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 388)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'59,259,259,268,76,273,273,258,258,44,102,83,93,138,225,226,13,292,100',
'101,26,28,228,77,227,79,80,-96,81,82,-96,17,132,229,85,85,59,276,276',
'85,228,66,278,226,37,44,33,33,33,279,23,103,227,9,34,10,26,11,24,61',
'62,12,49,52,54,55,56,57,58,60,63,15,67,68,70,59,16,66,71,269,37,270',
'33,271,44,141,142,97,113,112,34,72,216,302,303,61,62,73,49,52,54,55',
'56,57,58,60,63,23,67,68,70,59,211,212,23,213,66,214,215,89,44,33,91',
'92,217,218,219,220,221,204,205,145,97,-168,61,62,-96,49,52,54,55,56',
'57,58,60,63,59,67,68,70,106,107,66,-168,-168,44,-168,33,-168,-168,108',
'109,110,111,114,-168,-168,-168,-168,-168,115,116,85,49,52,54,55,56,57',
'58,60,63,59,67,68,70,23,66,125,126,37,44,33,127,128,129,85,133,132,23',
'34,85,145,171,176,61,62,185,49,52,54,55,56,57,58,60,63,186,67,68,70',
'59,187,66,120,191,37,132,33,193,147,194,23,23,198,200,34,202,222,85',
'232,61,62,233,49,52,54,55,56,57,58,60,63,234,67,68,70,235,155,59,236',
'237,66,238,239,37,150,151,44,240,241,242,243,85,228,34,260,76,262,263',
'61,62,264,49,52,54,55,56,57,58,60,63,266,67,68,70,77,59,79,80,66,81',
'82,37,267,33,44,176,12,294,296,297,299,34,300,33,308,313,61,62,315,49',
'52,54,55,56,57,58,60,63,316,67,68,70,318,59,228,85,66,228,324,37,325',
'33,44,327,328,329,330,331,33,34,85,76,,,61,62,,49,52,54,55,56,57,58',
'60,63,,67,68,70,77,59,79,80,66,81,82,252,253,33,44,,,,,,,,,,,,61,62',
',49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,,,33,44,,,,,,,,,,,177',
'61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,33,44,,,',
',,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37',
',33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59',
',,66,,,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67',
'68,70,,59,,,66,,,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58',
'60,63,,67,68,70,,59,,,66,,,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55',
'56,57,58,60,63,,67,68,70,,59,,,66,,,37,,33,44,,,,,,,34,,,,,61,62,,49',
'52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,33,147,,,,,,,34,,,',
',61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,155,59,,,66,,,37,150,151',
'44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66',
',,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70',
',59,,,66,,,37,,33,147,,,,,,,34,,,12,,61,62,,49,52,54,55,56,57,58,60',
'63,,67,68,70,155,59,,,66,,,37,150,151,147,,,,,,,34,,,,,61,62,,49,52',
'54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,150,230,44,,,,,,,34,,,',
',61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,33,247,',
',,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37',
',230,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59',
',,66,,,37,,33,247,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67',
'68,70,,59,,,66,,,37,,230,247,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58',
'60,63,,67,68,70,,59,,,66,,,37,,230,247,,,,,,,34,,,,,61,62,,49,52,54',
'55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,230,247,,,,,,,34,,,,,61,62',
',49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,230,247,,,,,,,34',
',,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,230,247',
',,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,',
'37,,230,247,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70',
',59,,,66,,,37,,230,247,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63',
',67,68,70,,59,,,66,,,37,,230,44,286,,,,,,34,,,,,61,62,,49,52,54,55,56',
'57,58,60,63,,67,68,70,,59,,,66,,,37,,33,147,,,,,,,34,,,,,61,62,,49,52',
'54,55,56,57,58,60,63,,67,68,70,155,59,,,66,,,37,150,151,147,,,,,,,34',
',,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,155,59,,,66,,,37,150',
'151,147,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,155',
'59,,,66,,,37,150,151,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60',
'63,,67,68,70,,59,,,66,,,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56',
'57,58,60,63,,67,68,70,,59,,,66,,,37,,33,44,,,,,,,34,,,,,61,62,,49,52',
'54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,33,44,,,,,,,34,,,12,,61',
'62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,33,147,,,,,',
',34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,155,59,,,66,,,37',
'150,151,147,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70',
'155,59,,,66,,,37,150,151,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58',
'60,63,,67,68,70,,59,,,66,,,37,,33,247,,,,,,,34,,,,,61,62,,49,52,54,55',
'56,57,58,60,63,,67,68,70,,59,,,66,,,37,,230,247,,,,,,,34,,,,,61,62,',
'49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,230,44,,,,,,,34',
',,12,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,33',
'44,286,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,',
',66,,,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68',
'70,,59,,,66,,,37,,33,247,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60',
'63,,67,68,70,,59,,,66,,,37,,230,247,,,,,,,34,,,,,61,62,,49,52,54,55',
'56,57,58,60,63,,67,68,70,,,,,66,,,37,,230,,,,,,,,34,-180,,,-180,61,62',
',49,52,54,55,56,57,58,60,63,,67,68,70,-180,-180,,-180,,-180,-180,,76',
',,,-180,-180,-180,-180,-180,75,,,,76,-180,-180,-180,119,,77,,79,80,',
'81,82,120,,,,,,77,,79,80,,81,82' ]
        racc_action_table = arr = ::Array.new(2053, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'12,198,300,209,86,213,270,198,300,12,38,19,32,92,151,152,1,230,35,35',
'12,12,153,86,152,86,86,151,86,86,230,9,86,153,19,32,28,213,270,92,209',
'12,215,290,12,28,12,198,300,215,10,38,290,0,12,0,28,0,11,12,12,0,12',
'12,12,12,12,12,12,12,12,7,12,12,12,34,7,28,13,211,28,211,28,211,34,95',
'95,95,63,63,28,15,149,256,256,28,28,16,28,28,28,28,28,28,28,28,28,17',
'28,28,28,39,149,149,24,149,34,149,149,25,39,34,30,31,149,149,149,149',
'149,144,144,144,34,316,34,34,33,34,34,34,34,34,34,34,34,34,44,34,34',
'34,52,54,39,316,316,44,316,39,316,316,55,56,57,58,70,316,316,316,316',
'316,72,73,75,39,39,39,39,39,39,39,39,39,91,39,39,39,76,44,77,78,44,91',
'44,80,81,82,83,87,88,89,44,93,96,99,105,44,44,112,44,44,44,44,44,44',
'44,44,44,115,44,44,44,97,116,91,118,120,91,121,91,122,97,123,125,126',
'133,134,91,135,150,171,177,91,91,178,91,91,91,91,91,91,91,91,91,179',
'91,91,91,180,97,100,181,182,97,183,184,97,97,97,100,186,187,189,190',
'193,197,97,200,136,201,202,97,97,203,97,97,97,97,97,97,97,97,97,207',
'97,97,97,136,101,136,136,100,136,136,100,208,100,101,210,222,241,244',
'245,253,100,254,263,265,272,100,100,278,100,100,100,100,100,100,100',
'100,100,287,100,100,100,294,102,298,299,101,304,305,101,310,101,102',
'314,317,318,320,321,324,101,331,196,,,101,101,,101,101,101,101,101,101',
'101,101,101,,101,101,101,196,103,196,196,102,196,196,196,196,102,103',
',,,,,,,,,,,102,102,,102,102,102,102,102,102,102,102,102,,102,102,102',
',106,,,103,,,,,103,106,,,,,,,,,,,106,103,103,,103,103,103,103,103,103',
'103,103,103,,103,103,103,,107,,,106,,,106,,106,107,,,,,,,106,,,,,106',
'106,,106,106,106,106,106,106,106,106,106,,106,106,106,,108,,,107,,,107',
',107,108,,,,,,,107,,,,,107,107,,107,107,107,107,107,107,107,107,107',
',107,107,107,,109,,,108,,,108,,108,109,,,,,,,108,,,,,108,108,,108,108',
'108,108,108,108,108,108,108,,108,108,108,,110,,,109,,,109,,109,110,',
',,,,,109,,,,,109,109,,109,109,109,109,109,109,109,109,109,,109,109,109',
',111,,,110,,,110,,110,111,,,,,,,110,,,,,110,110,,110,110,110,110,110',
'110,110,110,110,,110,110,110,,119,,,111,,,111,,111,119,,,,,,,111,,,',
',111,111,,111,111,111,111,111,111,111,111,111,,111,111,111,,132,,,119',
',,119,,119,132,,,,,,,119,,,,,119,119,,119,119,119,119,119,119,119,119',
'119,,119,119,119,132,142,,,132,,,132,132,132,142,,,,,,,132,,,,,132,132',
',132,132,132,132,132,132,132,132,132,,132,132,132,,145,,,142,,,142,',
'142,145,,,,,,,142,,,,,142,142,,142,142,142,142,142,142,142,142,142,',
'142,142,142,,147,,,145,,,145,,145,147,,,,,,,145,,,147,,145,145,,145',
'145,145,145,145,145,145,145,145,,145,145,145,147,155,,,147,,,147,147',
'147,155,,,,,,,147,,,,,147,147,,147,147,147,147,147,147,147,147,147,',
'147,147,147,,191,,,155,,,155,155,155,191,,,,,,,155,,,,,155,155,,155',
'155,155,155,155,155,155,155,155,,155,155,155,,194,,,191,,,191,,191,194',
',,,,,,191,,,,,191,191,,191,191,191,191,191,191,191,191,191,,191,191',
'191,,205,,,194,,,194,,194,205,,,,,,,194,,,,,194,194,,194,194,194,194',
'194,194,194,194,194,,194,194,194,,212,,,205,,,205,,205,212,,,,,,,205',
',,,,205,205,,205,205,205,205,205,205,205,205,205,,205,205,205,,214,',
',212,,,212,,212,214,,,,,,,212,,,,,212,212,,212,212,212,212,212,212,212',
'212,212,,212,212,212,,216,,,214,,,214,,214,216,,,,,,,214,,,,,214,214',
',214,214,214,214,214,214,214,214,214,,214,214,214,,217,,,216,,,216,',
'216,217,,,,,,,216,,,,,216,216,,216,216,216,216,216,216,216,216,216,',
'216,216,216,,218,,,217,,,217,,217,218,,,,,,,217,,,,,217,217,,217,217',
'217,217,217,217,217,217,217,,217,217,217,,219,,,218,,,218,,218,219,',
',,,,,218,,,,,218,218,,218,218,218,218,218,218,218,218,218,,218,218,218',
',220,,,219,,,219,,219,220,,,,,,,219,,,,,219,219,,219,219,219,219,219',
'219,219,219,219,,219,219,219,,221,,,220,,,220,,220,221,,,,,,,220,,,',
',220,220,,220,220,220,220,220,220,220,220,220,,220,220,220,,225,,,221',
',,221,,221,225,225,,,,,,221,,,,,221,221,,221,221,221,221,221,221,221',
'221,221,,221,221,221,,226,,,225,,,225,,225,226,,,,,,,225,,,,,225,225',
',225,225,225,225,225,225,225,225,225,,225,225,225,226,227,,,226,,,226',
'226,226,227,,,,,,,226,,,,,226,226,,226,226,226,226,226,226,226,226,226',
',226,226,226,227,228,,,227,,,227,227,227,228,,,,,,,227,,,,,227,227,',
'227,227,227,227,227,227,227,227,227,,227,227,227,228,229,,,228,,,228',
'228,228,229,,,,,,,228,,,,,228,228,,228,228,228,228,228,228,228,228,228',
',228,228,228,,239,,,229,,,229,,229,239,,,,,,,229,,,,,229,229,,229,229',
'229,229,229,229,229,229,229,,229,229,229,,243,,,239,,,239,,239,243,',
',,,,,239,,,,,239,239,,239,239,239,239,239,239,239,239,239,,239,239,239',
',247,,,243,,,243,,243,247,,,,,,,243,,,247,,243,243,,243,243,243,243',
'243,243,243,243,243,,243,243,243,,252,,,247,,,247,,247,252,,,,,,,247',
',,,,247,247,,247,247,247,247,247,247,247,247,247,,247,247,247,252,262',
',,252,,,252,252,252,262,,,,,,,252,,,,,252,252,,252,252,252,252,252,252',
'252,252,252,,252,252,252,262,266,,,262,,,262,262,262,266,,,,,,,262,',
',,,262,262,,262,262,262,262,262,262,262,262,262,,262,262,262,,269,,',
'266,,,266,,266,269,,,,,,,266,,,,,266,266,,266,266,266,266,266,266,266',
'266,266,,266,266,266,,271,,,269,,,269,,269,271,,,,,,,269,,,,,269,269',
',269,269,269,269,269,269,269,269,269,,269,269,269,,273,,,271,,,271,',
'271,273,,,,,,,271,,,273,,271,271,,271,271,271,271,271,271,271,271,271',
',271,271,271,,292,,,273,,,273,,273,292,292,,,,,,273,,,,,273,273,,273',
'273,273,273,273,273,273,273,273,,273,273,273,,297,,,292,,,292,,292,297',
',,,,,,292,,,,,292,292,,292,292,292,292,292,292,292,292,292,,292,292',
'292,,313,,,297,,,297,,297,313,,,,,,,297,,,,,297,297,,297,297,297,297',
'297,297,297,297,297,,297,297,297,,325,,,313,,,313,,313,325,,,,,,,313',
',,,,313,313,,313,313,313,313,313,313,313,313,313,,313,313,313,,,,,325',
',,325,,325,,,,,,,,325,160,,,160,325,325,,325,325,325,325,325,325,325',
'325,325,,325,325,325,160,160,,160,,160,160,,18,,,,160,160,160,160,160',
'18,,,,74,160,160,160,74,,18,,18,18,,18,18,74,,,,,,74,,74,74,,74,74' ]
        racc_action_check = arr = ::Array.new(2053, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    36,    16,   nil,   nil,   nil,   nil,   nil,    67,   nil,    13,
    -2,    36,    -6,    78,   nil,    86,    91,    55,  2003,   -18,
   nil,   nil,   nil,   nil,    62,    97,   nil,   nil,    30,   nil,
   111,    95,   -17,   108,    69,   -47,   nil,   nil,   -16,   105,
   nil,   nil,   nil,   nil,   140,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   135,   nil,   136,   145,   146,   147,   148,   nil,
   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,
    83,   nil,   164,   164,  2016,   120,   134,   157,   158,   nil,
   159,   160,   161,   144,   nil,   nil,    -7,   195,   159,   147,
   nil,   176,   -13,   149,   nil,    24,   139,   215,   nil,   175,
   253,   291,   329,   367,   nil,   188,   405,   443,   481,   519,
   557,   595,   131,   nil,   nil,   210,   218,   nil,   200,   633,
   210,   188,   218,   208,   nil,   180,   181,   nil,   nil,   nil,
   nil,   nil,   671,   231,   194,   197,   266,   nil,   nil,   nil,
   nil,   nil,   709,   nil,    68,   747,   nil,   785,   nil,    69,
   223,    -1,   -30,   -31,   nil,   823,   nil,   nil,   nil,   nil,
  1963,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   187,   nil,   nil,   nil,   nil,   nil,   224,   227,   237,
   241,   244,   245,   247,   253,   nil,   261,   260,   nil,   255,
   261,   861,   nil,   221,   899,   nil,   342,   221,    -5,   nil,
   270,   236,   276,   221,   nil,   937,   nil,   228,   288,   -13,
   291,    35,   975,   -10,  1013,    -1,  1051,  1089,  1127,  1165,
  1203,  1241,   283,   nil,   nil,  1279,  1317,  1355,  1393,  1431,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1469,
   nil,   303,   nil,  1507,   294,   300,   nil,  1545,   nil,   nil,
   nil,   nil,  1583,   297,   303,   nil,    80,   nil,   nil,   nil,
   nil,   nil,  1621,   263,   nil,   255,  1659,   nil,   nil,  1697,
    -9,  1735,   272,  1773,   nil,   nil,   nil,   nil,   270,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   314,   nil,   nil,
    -2,   nil,  1811,   nil,   327,   nil,   nil,  1849,   283,   285,
    -4,   nil,   nil,   nil,   286,   329,   nil,   nil,   nil,   nil,
   297,   nil,   nil,  1887,   329,   nil,   110,   330,   339,   nil,
   332,   338,   nil,   nil,   298,  1925,   nil,   nil,   nil,   nil,
   nil,   300,   nil,   nil,   nil ]

racc_action_default = [
  -186,  -186,    -1,    -2,    -3,    -4,    -5,    -9,   -22,  -186,
  -186,  -186,  -186,  -186,    -6,  -186,  -186,  -186,  -186,   -50,
   -51,   -53,   -54,   -96,  -186,   -35,   -36,   -37,  -186,   -39,
   -41,  -186,   -45,  -176,  -186,  -139,  -140,  -141,  -144,  -186,
  -146,  -147,  -148,  -149,  -186,  -151,  -152,  -153,  -154,  -155,
  -157,  -158,  -186,  -160,  -186,  -186,  -186,  -186,  -186,  -172,
  -173,  -174,  -175,  -186,  -179,  -180,  -181,  -182,  -183,  -184,
  -186,   335,  -186,  -186,  -186,  -186,  -186,  -186,  -186,   -58,
   -60,   -62,   -63,  -186,   -49,  -176,   -70,    -7,   -70,  -186,
   -38,  -186,  -186,  -186,   -44,  -186,  -186,  -186,  -135,  -186,
  -186,  -186,  -186,  -186,  -145,  -186,  -186,  -186,  -186,  -186,
  -186,  -186,  -186,  -178,  -185,  -186,  -186,   -23,  -186,  -186,
  -186,   -70,   -28,  -186,   -55,  -186,  -186,   -59,   -61,   -64,
   -48,   -26,  -186,  -186,   -74,   -72,   -47,   -40,   -42,  -156,
   -43,  -127,  -186,  -136,  -186,  -186,  -132,  -186,   -81,  -186,
  -186,  -176,   -99,  -186,  -101,  -186,  -105,  -106,  -107,  -108,
  -110,  -111,  -112,  -113,  -114,  -115,  -116,  -123,  -124,  -125,
  -126,  -186,  -137,  -138,  -142,  -143,  -150,  -186,  -186,  -186,
  -186,  -186,  -186,  -186,  -170,  -177,  -186,  -186,   -24,  -186,
   -32,  -186,   -25,  -186,  -186,   -56,  -186,   -71,  -186,   -34,
  -186,   -79,  -186,  -186,  -129,  -186,  -133,  -186,  -186,  -186,
  -125,  -186,  -186,  -186,  -186,  -186,  -186,  -186,  -186,  -186,
  -186,  -186,  -186,   -52,   -95,  -186,  -186,  -186,  -186,  -186,
  -176,  -104,  -159,  -161,  -162,  -163,  -164,  -165,  -166,  -186,
   -10,  -186,   -30,  -186,  -186,   -90,   -27,  -186,   -29,   -57,
   -65,   -66,  -186,  -186,    -8,   -13,   -18,   -15,   -16,   -17,
   -75,   -46,  -186,  -186,  -128,  -186,  -186,   -21,  -109,  -186,
  -186,  -186,  -186,  -186,   -85,   -86,   -88,   -92,  -186,   -94,
  -117,  -118,  -119,  -120,  -121,  -122,  -167,  -186,  -102,  -103,
  -100,  -134,  -186,  -171,  -186,   -31,   -33,  -186,   -67,  -186,
  -186,   -14,   -19,   -20,   -80,   -73,   -77,   -78,  -130,  -131,
  -186,   -84,   -91,  -186,  -186,   -93,  -169,  -186,  -186,   -89,
  -186,   -69,   -98,   -12,  -186,  -186,   -83,   -87,  -168,   -11,
   -68,  -186,   -76,   -82,   -97 ]

racc_goto_table = [
    84,    32,   183,   153,   248,   189,   223,   257,   160,   121,
   255,   244,   146,    94,    96,   306,    98,    32,   274,   117,
    29,     1,   272,     2,   277,    18,   280,   281,   282,   283,
   284,   285,    74,   105,    31,    19,    90,     3,   197,    86,
   288,   289,    19,   160,     4,     5,     6,     7,    14,    19,
    31,   134,   131,   209,   135,   254,   123,   301,   160,   118,
   206,    25,    87,   188,   130,   199,   160,   137,    88,   223,
   201,   261,   307,   139,   140,   311,   332,   143,   224,   310,
    32,   312,   174,   175,   249,   250,   251,   192,   320,   172,
   173,   321,   305,   314,   290,   178,   179,   180,   181,   182,
   184,   124,   231,    95,   136,   144,   104,   nil,   190,   257,
   nil,   nil,   323,    31,    19,   nil,   287,   319,   nil,   nil,
   nil,   nil,   nil,   326,   nil,   nil,   223,   246,   nil,   295,
   293,   203,   nil,   307,   207,   333,   210,   160,   160,   160,
   nil,   196,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   195,    19,   139,   nil,   nil,   nil,   nil,   nil,   298,   nil,
   nil,   nil,   nil,   160,   nil,   nil,   nil,   nil,   304,   nil,
   nil,   nil,   nil,   160,   123,   nil,   nil,   nil,   nil,   nil,
   245,   nil,   nil,   317,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   265,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   184,   nil,   nil,   nil,   291,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   184,   nil,
   nil,   nil,   190,   nil,   nil,   nil,   105,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   309,   nil,   nil,   nil,   nil,
   nil,   nil,   245,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   322,   184,   nil,   nil,   nil,   nil,   245,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   334 ]

racc_goto_check = [
    23,    26,    85,    47,    24,    25,    15,    14,    65,    20,
    11,    27,    73,    23,    71,    51,    74,    26,    55,    18,
    31,     1,    24,     2,    24,    17,    24,    24,    24,    24,
    24,    24,    17,    26,    34,    38,    31,     3,    47,    17,
    60,    60,    38,    65,     4,     5,     6,     7,     8,    38,
    34,     9,    21,    47,    21,    10,    23,    13,    65,    19,
    73,    28,    29,    18,    23,    30,    65,    32,    35,    15,
    36,    37,    14,    23,    23,    55,    51,    74,    40,    24,
    26,    24,    71,    71,    44,    45,    46,    21,    48,    26,
    26,    49,    50,    27,    59,    26,    26,    26,    26,    26,
    26,    38,    61,    70,    17,    72,    77,   nil,    26,    14,
   nil,   nil,    11,    34,    38,   nil,    85,    27,   nil,   nil,
   nil,   nil,   nil,    24,   nil,   nil,    15,    20,   nil,    25,
    85,    26,   nil,    14,    26,    24,    26,    65,    65,    65,
   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    38,    38,    23,   nil,   nil,   nil,   nil,   nil,    47,   nil,
   nil,   nil,   nil,    65,   nil,   nil,   nil,   nil,    47,   nil,
   nil,   nil,   nil,    65,    23,   nil,   nil,   nil,   nil,   nil,
    26,   nil,   nil,    85,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,    26,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,
   nil,   nil,    26,   nil,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,
   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,    26,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    23 ]

racc_goto_pointer = [
   nil,    21,    23,    37,    44,    45,    46,    47,    41,   -36,
  -143,  -188,   nil,  -199,  -191,  -144,   nil,    15,   -55,   -15,
   -66,   -34,   nil,   -19,  -190,  -114,   -11,  -180,    49,    37,
   -69,     8,   -24,   nil,    22,    43,   -65,  -130,    25,   nil,
   -72,   nil,   nil,   nil,  -112,  -111,  -110,   -94,  -211,  -208,
  -171,  -248,   nil,   nil,   nil,  -195,   nil,   nil,   nil,  -134,
  -186,   -53,   nil,   nil,   nil,   -89,   nil,   nil,   nil,   nil,
    69,   -20,     9,   -84,   -18,   nil,   nil,    67,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  -109,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   208,   nil,   nil,
   nil,   nil,   256,   nil,    42,   148,     8,   nil,   nil,   nil,
   nil,   nil,   122,    50,   149,   nil,   169,   nil,   nil,   nil,
   nil,   nil,    27,    30,    99,   nil,   nil,   nil,    51,    20,
   275,    21,    22,    78,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   168,   162,   163,   nil,   164,   165,   166,   152,
   154,   156,   157,   158,   159,    65,   161,   167,   170,    36,
   nil,    35,   nil,   nil,   nil,    38,    39,    40,    41,    43,
    45,    46,    47,    48,    53,   nil,    64,    69 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 83, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  2, 85, :_reduce_6,
  0, 91, :_reduce_none,
  3, 91, :_reduce_8,
  0, 90, :_reduce_none,
  5, 90, :_reduce_10,
  8, 90, :_reduce_11,
  3, 92, :_reduce_12,
  1, 92, :_reduce_none,
  2, 93, :_reduce_14,
  1, 94, :_reduce_none,
  1, 94, :_reduce_16,
  1, 94, :_reduce_17,
  0, 95, :_reduce_18,
  1, 95, :_reduce_19,
  1, 95, :_reduce_20,
  3, 97, :_reduce_21,
  1, 89, :_reduce_none,
  4, 86, :_reduce_23,
  5, 86, :_reduce_24,
  5, 87, :_reduce_25,
  4, 88, :_reduce_26,
  3, 102, :_reduce_27,
  1, 102, :_reduce_28,
  3, 104, :_reduce_29,
  3, 101, :_reduce_30,
  3, 107, :_reduce_31,
  1, 107, :_reduce_none,
  4, 100, :_reduce_33,
  5, 98, :_reduce_34,
  2, 98, :_reduce_35,
  1, 113, :_reduce_36,
  1, 113, :_reduce_37,
  2, 110, :_reduce_38,
  1, 110, :_reduce_39,
  3, 114, :_reduce_40,
  1, 114, :_reduce_none,
  3, 115, :_reduce_42,
  3, 115, :_reduce_43,
  2, 115, :_reduce_44,
  1, 115, :_reduce_none,
  4, 111, :_reduce_46,
  2, 117, :_reduce_47,
  3, 99, :_reduce_48,
  2, 99, :_reduce_49,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 122, :_reduce_none,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  3, 123, :_reduce_55,
  4, 123, :_reduce_56,
  5, 124, :_reduce_57,
  1, 125, :_reduce_58,
  2, 125, :_reduce_59,
  1, 125, :_reduce_60,
  2, 125, :_reduce_61,
  1, 125, :_reduce_62,
  1, 125, :_reduce_63,
  2, 125, :_reduce_64,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  2, 127, :_reduce_67,
  4, 128, :_reduce_68,
  1, 130, :_reduce_none,
  0, 103, :_reduce_none,
  2, 103, :_reduce_71,
  0, 118, :_reduce_none,
  3, 118, :_reduce_73,
  0, 112, :_reduce_none,
  2, 112, :_reduce_75,
  3, 132, :_reduce_76,
  1, 132, :_reduce_none,
  1, 133, :_reduce_none,
  0, 119, :_reduce_none,
  2, 119, :_reduce_80,
  1, 134, :_reduce_none,
  6, 135, :_reduce_82,
  5, 135, :_reduce_83,
  4, 136, :_reduce_84,
  3, 136, :_reduce_85,
  1, 137, :_reduce_none,
  3, 137, :_reduce_87,
  1, 137, :_reduce_88,
  3, 109, :_reduce_89,
  1, 109, :_reduce_none,
  4, 138, :_reduce_91,
  3, 138, :_reduce_92,
  4, 139, :_reduce_93,
  3, 139, :_reduce_94,
  2, 140, :_reduce_95,
  1, 120, :_reduce_96,
  3, 131, :_reduce_97,
  1, 131, :_reduce_none,
  1, 129, :_reduce_none,
  3, 129, :_reduce_100,
  1, 141, :_reduce_none,
  3, 141, :_reduce_102,
  3, 141, :_reduce_103,
  2, 142, :_reduce_104,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 143, :_reduce_none,
  1, 145, :_reduce_none,
  3, 145, :_reduce_109,
  1, 145, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 148, :_reduce_117,
  3, 148, :_reduce_118,
  3, 148, :_reduce_119,
  3, 148, :_reduce_120,
  3, 148, :_reduce_121,
  3, 148, :_reduce_122,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 151, :_reduce_127,
  5, 151, :_reduce_128,
  4, 151, :_reduce_129,
  6, 151, :_reduce_130,
  4, 155, :_reduce_131,
  1, 154, :_reduce_132,
  2, 154, :_reduce_133,
  4, 156, :_reduce_134,
  1, 152, :_reduce_135,
  2, 152, :_reduce_136,
  3, 108, :_reduce_137,
  3, 108, :_reduce_138,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_141,
  3, 153, :_reduce_142,
  3, 153, :_reduce_143,
  1, 153, :_reduce_none,
  2, 157, :_reduce_145,
  1, 157, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  3, 159, :_reduce_150,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 163, :_reduce_155,
  3, 96, :_reduce_156,
  1, 96, :_reduce_none,
  1, 116, :_reduce_none,
  4, 161, :_reduce_159,
  1, 161, :_reduce_none,
  4, 166, :_reduce_161,
  4, 166, :_reduce_162,
  4, 166, :_reduce_163,
  4, 166, :_reduce_164,
  4, 166, :_reduce_165,
  4, 166, :_reduce_166,
  3, 150, :_reduce_167,
  4, 150, :_reduce_168,
  4, 144, :_reduce_169,
  1, 167, :_reduce_none,
  3, 167, :_reduce_171,
  1, 164, :_reduce_172,
  1, 164, :_reduce_173,
  1, 158, :_reduce_174,
  1, 158, :_reduce_175,
  1, 105, :_reduce_176,
  3, 165, :_reduce_177,
  2, 165, :_reduce_178,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_181,
  1, 147, :_reduce_182,
  1, 147, :_reduce_183,
  1, 168, :_reduce_none,
  2, 169, :_reduce_185 ]

racc_reduce_n = 186

racc_shift_n = 335

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :UPDATE => 19,
  :SET => 20,
  :DELETE => 21,
  :FROM => 22,
  :equals_operator => 23,
  :VALUES => 24,
  :SELECT => 25,
  :asterisk => 26,
  :DISTINCT => 27,
  :period => 28,
  :AS => 29,
  :CROSS => 30,
  :JOIN => 31,
  :INNER => 32,
  :LEFT => 33,
  :OUTER => 34,
  :RIGHT => 35,
  :FULL => 36,
  :ON => 37,
  :USING => 38,
  :WHERE => 39,
  :GROUP => 40,
  :LIMIT => 41,
  :HAVING => 42,
  :NOT => 43,
  :BETWEEN => 44,
  :AND => 45,
  :IN => 46,
  :variable => 47,
  :LIKE => 48,
  :IS => 49,
  :NULL => 50,
  :EXISTS => 51,
  :identifier => 52,
  :OR => 53,
  :XOR => 54,
  :not_equals_operator => 55,
  :less_than_operator => 56,
  :greater_than_operator => 57,
  :less_than_or_equals_operator => 58,
  :greater_than_or_equals_operator => 59,
  :CASE => 60,
  :END => 61,
  :ELSE => 62,
  :WHEN => 63,
  :THEN => 64,
  :plus_sign => 65,
  :minus_sign => 66,
  :solidus => 67,
  :CURRENT_USER => 68,
  :COUNT => 69,
  :AVG => 70,
  :MAX => 71,
  :MIN => 72,
  :SUM => 73,
  :IFNULL => 74,
  :unsigned_float => 75,
  :quote => 76,
  :character_string_literal => 77,
  :true_literal => 78,
  :false_literal => 79,
  :DATE => 80,
  :date_string => 81 }

racc_nt_base = 82

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "UPDATE",
  "SET",
  "DELETE",
  "FROM",
  "equals_operator",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "period",
  "AS",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "LIMIT",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "variable",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "XOR",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "CASE",
  "END",
  "ELSE",
  "WHEN",
  "THEN",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "IFNULL",
  "unsigned_float",
  "quote",
  "character_string_literal",
  "true_literal",
  "false_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "update_specification",
  "delete_specification",
  "query_expression",
  "fetch_only_clause",
  "order_by_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "assign_list",
  "where_clause",
  "assign_column",
  "column_name",
  "row_value_constructor",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "distinct_select_list",
  "table_expression",
  "limit_clause",
  "select_list",
  "select_sublist",
  "derived_column",
  "qualifier",
  "from_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "row_subquery",
  "between_predicate",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_function",
  "boolean_primary",
  "predicate",
  "boolean_literal",
  "comparison_predicate",
  "row_value_constructor_element",
  "general_function",
  "case_expression",
  "when_expressions",
  "term",
  "when_value_expressions",
  "when_value_expression",
  "when_expression",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "general_set_function",
  "argument_list",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1])
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2])
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_12(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_14(val, _values, result)
     result = val[1].new(val[0])
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Descending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1])
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Update.new(val[1], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::Delete.new(val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_27(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_28(val, _values, result)
     result = Array(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::AssignColumn.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::All.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_39(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::All.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 98)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_57(val, _values, result)
     result = val[1].new(val[0], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::InnerJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::LeftJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::RightJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::FullJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::On.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2])
    result
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1])
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2])
    result
  end
.,.,

# reduce 74 omitted

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_76(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1])
    result
  end
.,.,

# reduce 81 omitted

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2])
    result
  end
.,.,

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_89(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_94(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_95(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 209)
  def _reduce_96(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_97(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2])
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_102(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 224)
  def _reduce_103(val, _values, result)
     result = SQLParser::Statement::Xor.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1])
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_109(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_117(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_119(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_120(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_121(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2])
    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_127(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_128(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_129(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_132(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_133(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_135(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_136(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2])
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Null.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2])
    result
  end
.,.,

# reduce 144 omitted

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_145(val, _values, result)
     result = val[0].new(val[1])
    result
  end
.,.,

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_150(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2])
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new)
    result
  end
.,.,

# reduce 160 omitted

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 333)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_165(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 337)
  def _reduce_166(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_167(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_168(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_169(val, _values, result)
     result = SQLParser::Statement::BooleanFunction.new(val[0], val[2])
    result
  end
.,.,

# reduce 170 omitted

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_171(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 353)
  def _reduce_172(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 354)
  def _reduce_173(val, _values, result)
    result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 357)
  def _reduce_174(val, _values, result)
     result = SQLParser::Statement::UnaryPlus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 358)
  def _reduce_175(val, _values, result)
     result = SQLParser::Statement::UnaryMinus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 362)
  def _reduce_176(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 366)
  def _reduce_177(val, _values, result)
     result = SQLParser::Statement::String.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 367)
  def _reduce_178(val, _values, result)
     result = SQLParser::Statement::String.new('')
    result
  end
.,.,

# reduce 179 omitted

# reduce 180 omitted

module_eval(<<'.,.,', 'parser.racc', 370)
  def _reduce_181(val, _values, result)
     result = SQLParser::Statement::Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_182(val, _values, result)
     result = SQLParser::Statement::True.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 374)
  def _reduce_183(val, _values, result)
     result = SQLParser::Statement::False.new
    result
  end
.,.,

# reduce 184 omitted

module_eval(<<'.,.,', 'parser.racc', 380)
  def _reduce_185(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SQLParser
