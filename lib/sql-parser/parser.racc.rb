#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 395)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

clist = [
'59,262,262,271,102,276,276,261,261,44,227,76,295,230,281,85,138,15,228',
'129,177,282,16,-99,231,-99,83,229,93,85,77,76,79,80,59,81,82,279,279',
'132,230,66,85,250,37,103,33,33,33,85,77,85,79,80,34,81,82,255,256,61',
'62,234,49,52,54,55,56,57,58,60,63,235,67,68,70,66,59,228,37,9,232,10',
'236,11,237,44,229,12,34,238,76,100,101,61,62,239,49,52,54,55,56,57,58',
'60,63,240,67,68,70,77,59,79,80,241,81,82,242,66,243,147,37,272,33,273',
'244,274,141,142,97,245,34,206,207,145,128,61,62,248,49,52,54,55,56,57',
'58,60,63,155,67,68,70,66,59,85,37,150,151,113,112,306,307,44,127,230',
'34,126,263,265,266,61,62,267,49,52,54,55,56,57,58,60,63,125,67,68,70',
'269,59,270,23,176,85,116,115,66,114,44,37,111,33,110,109,12,108,107',
'106,-99,34,297,92,299,300,61,62,191,49,52,54,55,56,57,58,60,63,91,67',
'68,70,66,59,89,37,303,33,304,23,33,312,44,23,73,34,317,72,319,320,61',
'62,71,49,52,54,55,56,57,58,60,63,322,67,68,70,24,59,230,85,23,230,328',
'329,66,17,44,37,331,33,332,333,334,335,33,13,176,34,85,171,145,185,61',
'62,186,49,52,54,55,56,57,58,60,63,187,67,68,70,66,59,120,85,191,33,132',
'195,196,23,44,23,200,202,204,23,132,133,61,62,-171,49,52,54,55,56,57',
'58,60,63,224,67,68,70,,59,,,,,-171,-171,66,-171,44,-171,-171,33,,,,',
'-171,-171,-171,-171,-171,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68',
'70,66,59,,37,,33,,,,,44,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,',
'67,68,70,,59,,,,,,,66,,250,37,,33,,,,,,,,34,,,,,61,62,,49,52,54,55,56',
'57,58,60,63,,67,68,70,66,59,,37,,232,,,,,44,,,34,,,,,61,62,,49,52,54',
'55,56,57,58,60,63,,67,68,70,,,,59,,,,,66,,,37,44,33,,,,,,,,34,,26,28',
',61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,59,,66,,,37,,33,,44,289',
',,,,34,,218,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,59,213,214',
',215,66,216,217,37,44,33,,,219,220,221,222,223,34,12,,,,61,62,,49,52',
'54,55,56,57,58,60,63,,67,68,70,59,,66,,,37,,33,,250,,,,,,34,,,,,61,62',
',49,52,54,55,56,57,58,60,63,,67,68,70,59,,,,,66,,,37,250,232,,,,,,,',
'34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,59,,66,,,37,,232',
',44,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,,59,,,66',
',,37,,33,147,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70',
'155,59,,,66,,,37,150,151,147,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58',
'60,63,,67,68,70,155,59,,,66,,,37,150,151,44,,,,,,,34,,,,26,61,62,,49',
'52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,33,44,,,,,,,34,,,12',
',61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,33,44,,',
',,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37',
',33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59',
',,66,,,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67',
'68,70,,59,,,66,,,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58',
'60,63,,67,68,70,,59,,,66,,,,,33,147,,,,,,,,,,97,,61,62,,49,52,54,55',
'56,57,58,60,63,,67,68,70,155,59,,,66,,,37,150,151,44,,,,,,,34,,,,,61',
'62,,49,52,54,55,56,57,58,60,63,76,67,68,70,,59,,,66,75,,,,33,44,,,,',
'77,,79,80,,81,82,,,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,',
'37,,33,147,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70',
'155,59,,,66,,,37,150,151,147,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58',
'60,63,,67,68,70,155,59,,,66,,,37,150,151,44,289,,,,,,34,,,,,61,62,,49',
'52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,33,250,,,,,,,34,,,',
',61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,232,250',
',,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,',
'37,,232,250,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70',
',59,,,66,,,37,,232,250,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63',
',67,68,70,,59,,,66,,,37,,232,250,,,,,,,34,,,,,61,62,,49,52,54,55,56',
'57,58,60,63,,67,68,70,,59,,,66,,,37,,232,250,,,,,,,34,,,,,61,62,,49',
'52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,232,250,,,,,,,34,,',
',,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,232,250',
',,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,',
'37,,232,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70',
',59,,,66,,,37,,33,250,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63',
',67,68,70,,59,,,66,,,37,,232,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57',
'58,60,63,,67,68,70,,59,,,66,,,37,,33,147,,,,,,,34,,,,,61,62,,49,52,54',
'55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,150,232,147,,,,,,,34,,,12',
',61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,155,59,,,66,,,37,150,151',
'44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,59,,,66',
',,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70',
',59,,,66,,,37,,33,44,,,,,,,34,,,,,61,62,,49,52,54,55,56,57,58,60,63',
',67,68,70,,59,,,66,,,37,,33,147,,,,,,,34,,,,,61,62,,49,52,54,55,56,57',
'58,60,63,,67,68,70,155,59,,,66,,,37,150,151,44,,,,,,,34,,,,,61,62,,49',
'52,54,55,56,57,58,60,63,,67,68,70,,59,,,66,,,37,,33,44,,,,,,,34,,,,',
'61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,,,,,66,,,37,,33,,,,,,,,34',
'-183,,,-183,61,62,,49,52,54,55,56,57,58,60,63,,67,68,70,-183,-183,,-183',
',-183,-183,76,,,,119,-183,-183,-183,-183,-183,,,,120,,-183,-183,-183',
',77,,79,80,,81,82' ]
        racc_action_table = arr = ::Array.new(2043, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'106,304,200,211,38,273,215,304,200,106,151,86,232,153,217,83,92,7,152',
'82,106,217,7,151,153,232,19,152,32,171,86,198,86,86,329,86,86,273,215',
'86,211,106,92,329,106,38,106,304,200,19,198,32,198,198,106,198,198,198',
'198,106,106,177,106,106,106,106,106,106,106,106,106,178,106,106,106',
'329,110,293,329,0,329,0,179,0,180,110,293,0,329,181,136,35,35,329,329',
'182,329,329,329,329,329,329,329,329,329,183,329,329,329,136,97,136,136',
'184,136,136,186,110,187,97,110,213,110,213,189,213,95,95,95,190,110',
'144,144,144,81,110,110,192,110,110,110,110,110,110,110,110,110,97,110',
'110,110,97,109,195,97,97,97,63,63,259,259,109,80,199,97,78,202,203,204',
'97,97,205,97,97,97,97,97,97,97,97,97,77,97,97,97,209,100,210,76,212',
'75,73,72,109,70,100,109,58,109,57,56,224,55,54,52,33,109,243,31,246',
'247,109,109,248,109,109,109,109,109,109,109,109,109,30,109,109,109,100',
'101,25,100,256,100,257,24,266,268,101,17,16,100,275,15,281,290,100,100',
'13,100,100,100,100,100,100,100,100,100,297,100,100,100,11,102,302,303',
'10,308,309,314,101,9,102,101,318,101,321,322,324,325,328,1,105,101,335',
'99,96,112,101,101,115,101,101,101,101,101,101,101,101,101,116,101,101',
'101,102,103,118,93,120,102,121,122,123,125,103,126,133,134,135,89,88',
'87,102,102,320,102,102,102,102,102,102,102,102,102,150,102,102,102,',
'108,,,,,320,320,103,320,108,320,320,103,,,,,320,320,320,320,320,,,,103',
'103,,103,103,103,103,103,103,103,103,103,,103,103,103,108,107,,108,',
'108,,,,,107,,,108,,,,,108,108,,108,108,108,108,108,108,108,108,108,',
'108,108,108,,317,,,,,,,107,,317,107,,107,,,,,,,,107,,,,,107,107,,107',
'107,107,107,107,107,107,107,107,,107,107,107,317,300,,317,,317,,,,,300',
',,317,,,,,317,317,,317,317,317,317,317,317,317,317,317,,317,317,317',
',,,12,,,,,300,,,300,12,300,,,,,,,,300,,12,12,,300,300,,300,300,300,300',
'300,300,300,300,300,,300,300,300,295,,12,,,12,,12,,295,295,,,,,12,,149',
',,12,12,,12,12,12,12,12,12,12,12,12,,12,12,12,276,149,149,,149,295,149',
'149,295,276,295,,,149,149,149,149,149,295,276,,,,295,295,,295,295,295',
'295,295,295,295,295,295,,295,295,295,274,,276,,,276,,276,,274,,,,,,276',
',,,,276,276,,276,276,276,276,276,276,276,276,276,,276,276,276,272,,',
',,274,,,274,272,274,,,,,,,,274,,,,,274,274,,274,274,274,274,274,274',
'274,274,274,,274,274,274,269,,272,,,272,,272,,269,,,,,,272,,,,,272,272',
',272,272,272,272,272,272,272,272,272,,272,272,272,,,265,,,269,,,269',
',269,265,,,,,,,269,,,,,269,269,,269,269,269,269,269,269,269,269,269',
',269,269,269,265,255,,,265,,,265,265,265,255,,,,,,,265,,,,,265,265,',
'265,265,265,265,265,265,265,265,265,,265,265,265,255,28,,,255,,,255',
'255,255,28,,,,,,,255,,,,28,255,255,,255,255,255,255,255,255,255,255',
'255,,255,255,255,,250,,,28,,,28,,28,250,,,,,,,28,,,250,,28,28,,28,28',
'28,28,28,28,28,28,28,,28,28,28,,245,,,250,,,250,,250,245,,,,,,,250,',
',,,250,250,,250,250,250,250,250,250,250,250,250,,250,250,250,,241,,',
'245,,,245,,245,241,,,,,,,245,,,,,245,245,,245,245,245,245,245,245,245',
'245,245,,245,245,245,,231,,,241,,,241,,241,231,,,,,,,241,,,,,241,241',
',241,241,241,241,241,241,241,241,241,,241,241,241,,34,,,231,,,231,,231',
'34,,,,,,,231,,,,,231,231,,231,231,231,231,231,231,231,231,231,,231,231',
'231,,230,,,34,,,,,34,230,,,,,,,,,,34,,34,34,,34,34,34,34,34,34,34,34',
'34,,34,34,34,230,39,,,230,,,230,230,230,39,,,,,,,230,,,,,230,230,,230',
'230,230,230,230,230,230,230,230,18,230,230,230,,44,,,39,18,,,,39,44',
',,,,18,,18,18,,18,18,,,,39,39,39,39,39,39,39,39,39,,39,39,39,,229,,',
'44,,,44,,44,229,,,,,,,44,,,,,44,44,,44,44,44,44,44,44,44,44,44,,44,44',
'44,229,228,,,229,,,229,229,229,228,,,,,,,229,,,,,229,229,,229,229,229',
'229,229,229,229,229,229,,229,229,229,228,227,,,228,,,228,228,228,227',
'227,,,,,,228,,,,,228,228,,228,228,228,228,228,228,228,228,228,,228,228',
'228,,223,,,227,,,227,,227,223,,,,,,,227,,,,,227,227,,227,227,227,227',
'227,227,227,227,227,,227,227,227,,222,,,223,,,223,,223,222,,,,,,,223',
',,,,223,223,,223,223,223,223,223,223,223,223,223,,223,223,223,,221,',
',222,,,222,,222,221,,,,,,,222,,,,,222,222,,222,222,222,222,222,222,222',
'222,222,,222,222,222,,220,,,221,,,221,,221,220,,,,,,,221,,,,,221,221',
',221,221,221,221,221,221,221,221,221,,221,221,221,,219,,,220,,,220,',
'220,219,,,,,,,220,,,,,220,220,,220,220,220,220,220,220,220,220,220,',
'220,220,220,,218,,,219,,,219,,219,218,,,,,,,219,,,,,219,219,,219,219',
'219,219,219,219,219,219,219,,219,219,219,,216,,,218,,,218,,218,216,',
',,,,,218,,,,,218,218,,218,218,218,218,218,218,218,218,218,,218,218,218',
',214,,,216,,,216,,216,214,,,,,,,216,,,,,216,216,,216,216,216,216,216',
'216,216,216,216,,216,216,216,,207,,,214,,,214,,214,207,,,,,,,214,,,',
',214,214,,214,214,214,214,214,214,214,214,214,,214,214,214,,196,,,207',
',,207,,207,196,,,,,,,207,,,,,207,207,,207,207,207,207,207,207,207,207',
'207,,207,207,207,,191,,,196,,,196,,196,191,,,,,,,196,,,,,196,196,,196',
'196,196,196,196,196,196,196,196,,196,196,196,,155,,,191,,,191,,191,155',
',,,,,,191,,,,,191,191,,191,191,191,191,191,191,191,191,191,,191,191',
'191,,147,,,155,,,155,155,155,147,,,,,,,155,,,147,,155,155,,155,155,155',
'155,155,155,155,155,155,,155,155,155,147,145,,,147,,,147,147,147,145',
',,,,,,147,,,,,147,147,,147,147,147,147,147,147,147,147,147,,147,147',
'147,,142,,,145,,,145,,145,142,,,,,,,145,,,,,145,145,,145,145,145,145',
'145,145,145,145,145,,145,145,145,,91,,,142,,,142,,142,91,,,,,,,142,',
',,,142,142,,142,142,142,142,142,142,142,142,142,,142,142,142,,132,,',
'91,,,91,,91,132,,,,,,,91,,,,,91,91,,91,91,91,91,91,91,91,91,91,,91,91',
'91,132,119,,,132,,,132,132,132,119,,,,,,,132,,,,,132,132,,132,132,132',
'132,132,132,132,132,132,,132,132,132,,111,,,119,,,119,,119,111,,,,,',
',119,,,,,119,119,,119,119,119,119,119,119,119,119,119,,119,119,119,',
',,,111,,,111,,111,,,,,,,,111,160,,,160,111,111,,111,111,111,111,111',
'111,111,111,111,,111,111,111,160,160,,160,,160,160,74,,,,74,160,160',
'160,160,160,,,,74,,160,160,160,,74,,74,74,,74,74' ]
        racc_action_check = arr = ::Array.new(2043, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    62,   280,   nil,   nil,   nil,   nil,   nil,    13,   nil,   252,
   213,   239,   486,   247,   nil,   237,   233,   186,  1083,    -3,
   nil,   nil,   nil,   nil,   182,   207,   nil,   nil,   789,   nil,
   212,   180,    -1,   177,   979,    26,   nil,   nil,   -22,  1055,
   nil,   nil,   nil,   nil,  1093,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   189,   nil,   188,   187,   185,   184,   182,   nil,
   nil,   nil,   nil,    81,   nil,   nil,   nil,   nil,   nil,   nil,
   113,   nil,   186,   184,  2006,   138,   136,   150,   134,   nil,
   128,   100,   -15,   -37,   nil,   nil,     0,   318,   280,   266,
   nil,  1815,   -10,   254,   nil,    65,   222,   104,   nil,   256,
   180,   222,   256,   298,   nil,   265,    -6,   374,   332,   146,
    70,  1929,   210,   nil,   nil,   282,   295,   nil,   281,  1891,
   292,   270,   299,   288,   nil,   260,   262,   nil,   nil,   nil,
   nil,   nil,  1853,   312,   275,   277,    79,   nil,   nil,   nil,
   nil,   nil,  1777,   nil,    70,  1739,   nil,  1701,   nil,   525,
   318,    -5,   -27,   -40,   nil,  1663,   nil,   nil,   nil,   nil,
  1967,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -23,   nil,   nil,   nil,   nil,   nil,    45,    55,    66,
    68,    73,    79,    89,   102,   nil,   108,   108,   nil,   108,
   118,  1625,   126,   nil,   nil,   101,  1587,   nil,    20,   110,
    -4,   nil,   160,   125,   165,   110,   nil,  1549,   nil,   121,
   171,   -13,   173,    77,  1511,    -9,  1473,   -29,  1435,  1397,
  1359,  1321,  1283,  1245,   176,   nil,   nil,  1207,  1169,  1131,
  1017,   941,    -3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   903,   nil,   201,   nil,   865,   193,   199,   198,   nil,
   827,   nil,   nil,   nil,   nil,   751,   216,   222,   nil,   146,
   nil,   nil,   nil,   nil,   nil,   713,   183,   nil,   175,   675,
   nil,   nil,   636,   -10,   600,   196,   561,   nil,   nil,   nil,
   nil,   193,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   228,   nil,   nil,    32,   nil,   525,   nil,   250,   nil,   nil,
   450,   nil,   210,   212,    -5,   nil,   nil,   nil,   213,   256,
   nil,   nil,   nil,   nil,   223,   nil,   nil,   408,   257,   nil,
   300,   259,   268,   nil,   261,   267,   nil,   nil,   227,    28,
   nil,   nil,   nil,   nil,   nil,   231,   nil,   nil,   nil ]

racc_action_default = [
  -189,  -189,    -1,    -2,    -3,    -4,    -5,    -9,   -22,  -189,
  -189,  -189,  -189,  -189,    -6,  -189,  -189,  -189,  -189,   -53,
   -54,   -56,   -57,   -99,  -189,   -38,   -39,   -40,  -189,   -42,
   -44,  -189,   -48,  -179,  -189,  -142,  -143,  -144,  -147,  -189,
  -149,  -150,  -151,  -152,  -189,  -154,  -155,  -156,  -157,  -158,
  -160,  -161,  -189,  -163,  -189,  -189,  -189,  -189,  -189,  -175,
  -176,  -177,  -178,  -189,  -182,  -183,  -184,  -185,  -186,  -187,
  -189,   339,  -189,  -189,  -189,  -189,  -189,  -189,  -189,   -61,
   -63,   -65,   -66,  -189,   -52,  -179,   -73,    -7,   -73,  -189,
   -41,  -189,  -189,  -189,   -47,  -189,  -189,  -189,  -138,  -189,
  -189,  -189,  -189,  -189,  -148,  -189,  -189,  -189,  -189,  -189,
  -189,  -189,  -189,  -181,  -188,  -189,  -189,   -23,  -189,  -189,
  -189,   -73,   -28,  -189,   -58,  -189,  -189,   -62,   -64,   -67,
   -51,   -26,  -189,  -189,   -77,   -75,   -50,   -43,   -45,  -159,
   -46,  -130,  -189,  -139,  -189,  -189,  -135,  -189,   -84,  -189,
  -189,  -179,  -102,  -189,  -104,  -189,  -108,  -109,  -110,  -111,
  -113,  -114,  -115,  -116,  -117,  -118,  -119,  -126,  -127,  -128,
  -129,  -189,  -140,  -141,  -145,  -146,  -153,  -189,  -189,  -189,
  -189,  -189,  -189,  -189,  -173,  -180,  -189,  -189,   -24,  -189,
   -32,  -189,   -35,   -36,   -25,  -189,  -189,   -59,  -189,   -74,
  -189,   -37,  -189,   -82,  -189,  -189,  -132,  -189,  -136,  -189,
  -189,  -189,  -128,  -189,  -189,  -189,  -189,  -189,  -189,  -189,
  -189,  -189,  -189,  -189,  -189,   -55,   -98,  -189,  -189,  -189,
  -189,  -189,  -179,  -107,  -162,  -164,  -165,  -166,  -167,  -168,
  -169,  -189,   -10,  -189,   -30,  -189,  -189,   -93,  -189,   -27,
  -189,   -29,   -60,   -68,   -69,  -189,  -189,    -8,   -13,   -18,
   -15,   -16,   -17,   -78,   -49,  -189,  -189,  -131,  -189,  -189,
   -21,  -112,  -189,  -189,  -189,  -189,  -189,   -88,   -89,   -91,
   -95,  -189,   -97,  -120,  -121,  -122,  -123,  -124,  -125,  -170,
  -189,  -105,  -106,  -103,  -137,  -189,  -174,  -189,   -31,   -33,
  -189,   -34,   -70,  -189,  -189,   -14,   -19,   -20,   -83,   -76,
   -80,   -81,  -133,  -134,  -189,   -87,   -94,  -189,  -189,   -96,
  -172,  -189,  -189,   -92,  -189,   -72,  -101,   -12,  -189,  -189,
   -86,   -90,  -171,   -11,   -71,  -189,   -79,   -85,  -100 ]

racc_goto_table = [
    84,   183,    32,   153,   189,   193,   260,   160,   121,    19,
    18,   258,   277,    94,    31,   310,    19,    74,    32,   225,
   246,    98,   117,    19,    86,   131,    96,   135,   146,    29,
    31,   291,   292,    25,   105,    87,   201,     1,   199,   137,
   305,    88,   160,   203,   264,    90,   257,   226,   252,   253,
   254,   134,   324,   211,   325,   309,   123,   160,    14,     7,
   194,   293,   233,     6,   130,   160,   188,    95,     5,   144,
   315,     4,   311,   139,   140,   124,   208,   336,     3,   104,
   118,    32,   143,     2,   225,   nil,   nil,   nil,    19,   136,
   172,   173,   nil,    31,   174,   175,   178,   179,   180,   181,
   182,   184,   nil,   nil,   nil,   318,   nil,   nil,   nil,   190,
   260,   nil,   nil,   nil,   nil,   327,   nil,   290,   nil,   nil,
   nil,   nil,   nil,   251,   197,    19,   198,   nil,   249,   323,
   298,   296,   205,   301,   311,   209,   nil,   212,   160,   160,
   160,   275,   225,   280,   nil,   283,   284,   285,   286,   287,
   288,   nil,   139,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   302,   nil,   nil,   nil,   160,   nil,   nil,   nil,   nil,
   nil,   308,   nil,   nil,   nil,   160,   123,   nil,   nil,   nil,
   nil,   247,   nil,   nil,   nil,   321,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   268,   nil,   314,
   nil,   316,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   184,   nil,   nil,
   nil,   294,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   184,   nil,   nil,   nil,   190,   nil,   nil,   nil,   nil,
   105,   nil,   nil,   nil,   330,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   337,   nil,   nil,   313,
   nil,   nil,   nil,   nil,   nil,   nil,   247,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   326,   184,   nil,   nil,   nil,   nil,
   247,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   338 ]

racc_goto_check = [
    23,    87,    26,    49,    25,    29,    14,    67,    20,    40,
    17,    11,    57,    23,    36,    53,    40,    17,    26,    15,
    28,    76,    18,    40,    17,    21,    73,    21,    75,    33,
    36,    62,    62,    30,    26,    31,    32,     1,    49,    34,
    13,    37,    67,    38,    39,    33,    10,    42,    46,    47,
    48,     9,    50,    49,    51,    52,    23,    67,     8,     7,
    21,    61,    63,     6,    23,    67,    18,    72,     5,    74,
    57,     4,    14,    23,    23,    40,    75,    53,     3,    79,
    19,    26,    76,     2,    15,   nil,   nil,   nil,    40,    17,
    26,    26,   nil,    36,    73,    73,    26,    26,    26,    26,
    26,    26,   nil,   nil,   nil,    28,   nil,   nil,   nil,    26,
    14,   nil,   nil,   nil,   nil,    11,   nil,    87,   nil,   nil,
   nil,   nil,   nil,    24,    40,    40,    17,   nil,    20,    28,
    25,    87,    26,    29,    14,    26,   nil,    26,    67,    67,
    67,    24,    15,    24,   nil,    24,    24,    24,    24,    24,
    24,   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,    67,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,    67,    23,   nil,   nil,   nil,
   nil,    26,   nil,   nil,   nil,    87,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,    24,
   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,
   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    26,   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,
    26,   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    23,    26,   nil,   nil,   nil,   nil,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    23 ]

racc_goto_pointer = [
   nil,    37,    83,    78,    71,    68,    63,    59,    51,   -36,
  -154,  -189,   nil,  -219,  -194,  -131,   nil,     0,   -52,     6,
   -67,   -61,   nil,   -19,   -73,  -115,   -10,   nil,  -171,  -115,
    21,    10,   -98,    17,   -52,   nil,     2,    16,   -92,  -159,
    -1,   nil,  -103,   nil,   nil,   nil,  -150,  -149,  -148,   -94,
  -251,  -249,  -211,  -251,   nil,   nil,   nil,  -203,   nil,   nil,
   nil,  -169,  -197,   -93,   nil,   nil,   nil,   -90,   nil,   nil,
   nil,   nil,    33,    -8,   -27,   -68,   -13,   nil,   nil,    40,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -110,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   210,   nil,   nil,
   nil,   nil,   259,   nil,    42,   148,     8,   nil,   nil,   nil,
   nil,   nil,   122,    50,   149,   nil,   169,   192,   nil,   nil,
   nil,   nil,   nil,   nil,    27,    30,    99,   nil,   nil,   nil,
    51,    20,   278,    21,    22,    78,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   168,   162,   163,   nil,   164,   165,
   166,   152,   154,   156,   157,   158,   159,    65,   161,   167,
   170,    36,   nil,    35,   nil,   nil,   nil,    38,    39,    40,
    41,    43,    45,    46,    47,    48,    53,   nil,    64,    69 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 83, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  2, 85, :_reduce_6,
  0, 91, :_reduce_none,
  3, 91, :_reduce_8,
  0, 90, :_reduce_none,
  5, 90, :_reduce_10,
  8, 90, :_reduce_11,
  3, 92, :_reduce_12,
  1, 92, :_reduce_none,
  2, 93, :_reduce_14,
  1, 94, :_reduce_none,
  1, 94, :_reduce_16,
  1, 94, :_reduce_17,
  0, 95, :_reduce_18,
  1, 95, :_reduce_19,
  1, 95, :_reduce_20,
  3, 97, :_reduce_21,
  1, 89, :_reduce_none,
  4, 86, :_reduce_23,
  5, 86, :_reduce_24,
  5, 87, :_reduce_25,
  4, 88, :_reduce_26,
  3, 102, :_reduce_27,
  1, 102, :_reduce_28,
  3, 104, :_reduce_29,
  3, 101, :_reduce_30,
  3, 107, :_reduce_31,
  1, 107, :_reduce_none,
  3, 109, :_reduce_33,
  3, 111, :_reduce_34,
  1, 111, :_reduce_none,
  2, 100, :_reduce_36,
  5, 98, :_reduce_37,
  2, 98, :_reduce_38,
  1, 115, :_reduce_39,
  1, 115, :_reduce_40,
  2, 112, :_reduce_41,
  1, 112, :_reduce_42,
  3, 116, :_reduce_43,
  1, 116, :_reduce_none,
  3, 117, :_reduce_45,
  3, 117, :_reduce_46,
  2, 117, :_reduce_47,
  1, 117, :_reduce_none,
  4, 113, :_reduce_49,
  2, 119, :_reduce_50,
  3, 99, :_reduce_51,
  2, 99, :_reduce_52,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 124, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  3, 125, :_reduce_58,
  4, 125, :_reduce_59,
  5, 126, :_reduce_60,
  1, 127, :_reduce_61,
  2, 127, :_reduce_62,
  1, 127, :_reduce_63,
  2, 127, :_reduce_64,
  1, 127, :_reduce_65,
  1, 127, :_reduce_66,
  2, 127, :_reduce_67,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  2, 129, :_reduce_70,
  4, 130, :_reduce_71,
  1, 132, :_reduce_none,
  0, 103, :_reduce_none,
  2, 103, :_reduce_74,
  0, 120, :_reduce_none,
  3, 120, :_reduce_76,
  0, 114, :_reduce_none,
  2, 114, :_reduce_78,
  3, 134, :_reduce_79,
  1, 134, :_reduce_none,
  1, 135, :_reduce_none,
  0, 121, :_reduce_none,
  2, 121, :_reduce_83,
  1, 136, :_reduce_none,
  6, 137, :_reduce_85,
  5, 137, :_reduce_86,
  4, 138, :_reduce_87,
  3, 138, :_reduce_88,
  1, 139, :_reduce_none,
  3, 139, :_reduce_90,
  1, 139, :_reduce_91,
  3, 110, :_reduce_92,
  1, 110, :_reduce_none,
  4, 140, :_reduce_94,
  3, 140, :_reduce_95,
  4, 141, :_reduce_96,
  3, 141, :_reduce_97,
  2, 142, :_reduce_98,
  1, 122, :_reduce_99,
  3, 133, :_reduce_100,
  1, 133, :_reduce_none,
  1, 131, :_reduce_none,
  3, 131, :_reduce_103,
  1, 143, :_reduce_none,
  3, 143, :_reduce_105,
  3, 143, :_reduce_106,
  2, 144, :_reduce_107,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  1, 145, :_reduce_none,
  1, 147, :_reduce_none,
  3, 147, :_reduce_112,
  1, 147, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 150, :_reduce_120,
  3, 150, :_reduce_121,
  3, 150, :_reduce_122,
  3, 150, :_reduce_123,
  3, 150, :_reduce_124,
  3, 150, :_reduce_125,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  3, 153, :_reduce_130,
  5, 153, :_reduce_131,
  4, 153, :_reduce_132,
  6, 153, :_reduce_133,
  4, 157, :_reduce_134,
  1, 156, :_reduce_135,
  2, 156, :_reduce_136,
  4, 158, :_reduce_137,
  1, 154, :_reduce_138,
  2, 154, :_reduce_139,
  3, 108, :_reduce_140,
  3, 108, :_reduce_141,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_144,
  3, 155, :_reduce_145,
  3, 155, :_reduce_146,
  1, 155, :_reduce_none,
  2, 159, :_reduce_148,
  1, 159, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_153,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 165, :_reduce_158,
  3, 96, :_reduce_159,
  1, 96, :_reduce_none,
  1, 118, :_reduce_none,
  4, 163, :_reduce_162,
  1, 163, :_reduce_none,
  4, 168, :_reduce_164,
  4, 168, :_reduce_165,
  4, 168, :_reduce_166,
  4, 168, :_reduce_167,
  4, 168, :_reduce_168,
  4, 168, :_reduce_169,
  3, 152, :_reduce_170,
  4, 152, :_reduce_171,
  4, 146, :_reduce_172,
  1, 169, :_reduce_none,
  3, 169, :_reduce_174,
  1, 166, :_reduce_175,
  1, 166, :_reduce_176,
  1, 160, :_reduce_177,
  1, 160, :_reduce_178,
  1, 105, :_reduce_179,
  3, 167, :_reduce_180,
  2, 167, :_reduce_181,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_184,
  1, 149, :_reduce_185,
  1, 149, :_reduce_186,
  1, 170, :_reduce_none,
  2, 171, :_reduce_188 ]

racc_reduce_n = 189

racc_shift_n = 339

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :FETCH => 4,
  :FIRST => 5,
  :unsigned_integer => 6,
  :ROWS => 7,
  :ONLY => 8,
  :OFFSET => 9,
  :NEXT => 10,
  :comma => 11,
  :built_in_function => 12,
  :ASC => 13,
  :DESC => 14,
  :left_paren => 15,
  :right_paren => 16,
  :INSERT => 17,
  :INTO => 18,
  :UPDATE => 19,
  :SET => 20,
  :DELETE => 21,
  :FROM => 22,
  :equals_operator => 23,
  :VALUES => 24,
  :SELECT => 25,
  :asterisk => 26,
  :DISTINCT => 27,
  :period => 28,
  :AS => 29,
  :CROSS => 30,
  :JOIN => 31,
  :INNER => 32,
  :LEFT => 33,
  :OUTER => 34,
  :RIGHT => 35,
  :FULL => 36,
  :ON => 37,
  :USING => 38,
  :WHERE => 39,
  :GROUP => 40,
  :LIMIT => 41,
  :HAVING => 42,
  :NOT => 43,
  :BETWEEN => 44,
  :AND => 45,
  :IN => 46,
  :variable => 47,
  :LIKE => 48,
  :IS => 49,
  :NULL => 50,
  :EXISTS => 51,
  :identifier => 52,
  :OR => 53,
  :XOR => 54,
  :not_equals_operator => 55,
  :less_than_operator => 56,
  :greater_than_operator => 57,
  :less_than_or_equals_operator => 58,
  :greater_than_or_equals_operator => 59,
  :CASE => 60,
  :END => 61,
  :ELSE => 62,
  :WHEN => 63,
  :THEN => 64,
  :plus_sign => 65,
  :minus_sign => 66,
  :solidus => 67,
  :CURRENT_USER => 68,
  :COUNT => 69,
  :AVG => 70,
  :MAX => 71,
  :MIN => 72,
  :SUM => 73,
  :IFNULL => 74,
  :unsigned_float => 75,
  :quote => 76,
  :character_string_literal => 77,
  :true_literal => 78,
  :false_literal => 79,
  :DATE => 80,
  :date_string => 81 }

racc_nt_base = 82

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "FETCH",
  "FIRST",
  "unsigned_integer",
  "ROWS",
  "ONLY",
  "OFFSET",
  "NEXT",
  "comma",
  "built_in_function",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "UPDATE",
  "SET",
  "DELETE",
  "FROM",
  "equals_operator",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "period",
  "AS",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "LIMIT",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "variable",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "XOR",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "CASE",
  "END",
  "ELSE",
  "WHEN",
  "THEN",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "IFNULL",
  "unsigned_float",
  "quote",
  "character_string_literal",
  "true_literal",
  "false_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "update_specification",
  "delete_specification",
  "query_expression",
  "fetch_only_clause",
  "order_by_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "assign_list",
  "where_clause",
  "assign_column",
  "column_name",
  "row_value_constructor",
  "in_column_list",
  "value_expression",
  "in_values_expression",
  "in_value_list",
  "in_values_list",
  "distinct_select_list",
  "table_expression",
  "limit_clause",
  "select_list",
  "select_sublist",
  "derived_column",
  "qualifier",
  "from_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "row_subquery",
  "between_predicate",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_function",
  "boolean_primary",
  "predicate",
  "boolean_literal",
  "comparison_predicate",
  "row_value_constructor_element",
  "general_function",
  "case_expression",
  "when_expressions",
  "term",
  "when_value_expressions",
  "when_value_expression",
  "when_expression",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "general_literal",
  "general_set_function",
  "argument_list",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 15)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1])
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2])
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_10(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(0, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::FetchOnly.new(val[1], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_12(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_14(val, _values, result)
     result = val[1].new(val[0])
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Descending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1])
    result
  end
.,.,

# reduce 22 omitted

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Update.new(val[1], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::Delete.new(val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_27(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_28(val, _values, result)
     result = Array(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::AssignColumn.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_31(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 35 omitted

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::InValuesList.new(Array(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_39(val, _values, result)
     result = SQLParser::Statement::All.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::Distinct.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_42(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_43(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::All.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 48 omitted

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_60(val, _values, result)
     result = val[1].new(val[0], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::InnerJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_63(val, _values, result)
     result = SQLParser::Statement::LeftJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 139)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::RightJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::FullJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.racc', 148)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::On.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2])
    result
  end
.,.,

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 158)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1])
    result
  end
.,.,

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2])
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_79(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1])
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 188)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2])
    result
  end
.,.,

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::InValueList.new(Array(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_92(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 93 omitted

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_94(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_95(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 208)
  def _reduce_96(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 209)
  def _reduce_97(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_98(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_100(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.racc', 225)
  def _reduce_103(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2])
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Xor.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1])
    result
  end
.,.,

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_112(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_120(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_121(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 259)
  def _reduce_122(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_125(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2])
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(nil,val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 276)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::CaseClause.new(val[1], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_135(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_136(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::WhenClause.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_138(val, _values, result)
     result = [ val[0] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_139(val, _values, result)
     result = [ *val[0], val[1] ]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2])
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Null.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2])
    result
  end
.,.,

# reduce 147 omitted

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_148(val, _values, result)
     result = val[0].new(val[1])
    result
  end
.,.,

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_153(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 328)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2])
    result
  end
.,.,

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new)
    result
  end
.,.,

# reduce 163 omitted

module_eval(<<'.,.,', 'parser.racc', 339)
  def _reduce_164(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 340)
  def _reduce_165(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 341)
  def _reduce_166(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_167(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 343)
  def _reduce_168(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_169(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_170(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_171(val, _values, result)
     result = SQLParser::Statement::FunctionCall.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 352)
  def _reduce_172(val, _values, result)
     result = SQLParser::Statement::BooleanFunction.new(val[0], val[2])
    result
  end
.,.,

# reduce 173 omitted

module_eval(<<'.,.,', 'parser.racc', 356)
  def _reduce_174(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 360)
  def _reduce_175(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 361)
  def _reduce_176(val, _values, result)
    result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 364)
  def _reduce_177(val, _values, result)
     result = SQLParser::Statement::UnaryPlus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 365)
  def _reduce_178(val, _values, result)
     result = SQLParser::Statement::UnaryMinus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 369)
  def _reduce_179(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 373)
  def _reduce_180(val, _values, result)
     result = SQLParser::Statement::String.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 374)
  def _reduce_181(val, _values, result)
     result = SQLParser::Statement::String.new('')
    result
  end
.,.,

# reduce 182 omitted

# reduce 183 omitted

module_eval(<<'.,.,', 'parser.racc', 377)
  def _reduce_184(val, _values, result)
     result = SQLParser::Statement::Variable.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 380)
  def _reduce_185(val, _values, result)
     result = SQLParser::Statement::True.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 381)
  def _reduce_186(val, _values, result)
     result = SQLParser::Statement::False.new
    result
  end
.,.,

# reduce 187 omitted

module_eval(<<'.,.,', 'parser.racc', 387)
  def _reduce_188(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SQLParser
